# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Crow Eye v004.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import GUI_resources
import sqlite3
from PyQt5 import QtCore, QtGui, QtWidgets
import subprocess



class Ui_Crow_Eye(object):
    def setupUi(self, Crow_Eye):
        Crow_Eye.setObjectName("Crow_Eye")
        Crow_Eye.resize(1106, 820)
        Crow_Eye.setSizeIncrement(QtCore.QSize(15, 0))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/Icons/CrowEye.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Crow_Eye.setWindowIcon(icon)
        Crow_Eye.setStyleSheet("/* Style for the tab widget */\n"
"QTabWidget::pane {\n"
"    border: 1px solid #3c3c3c;\n"
"    border-radius: 8px;\n"
"    background-color: #2c2c2c;\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */\n"
"}\n"
"\n"
"/* Style for each tab */\n"
"QTabBar::tab {\n"
"    padding: 10px 20px;\n"
"    color: #ddd; /* Lighter text color */\n"
"    background-color: #3c3c3c;\n"
"    border: 1px solid #4c4c4c;\n"
"    border-top-left-radius: 5px;\n"
"    border-top-right-radius: 5px;\n"
"    margin-right: -1px; /* Ensures adjacent tabs have no gap */\n"
"    transition: background-color 0.3s ease, color 0.3s ease; /* Smooth color transition */\n"
"}\n"
"\n"
"/* Style for the active tab */\n"
"QTabBar::tab:selected {\n"
"    background-color: #4c4c4c;\n"
"    color: #66ff66; /* Softer green text for active tab */\n"
"}\n"
"\n"
"/* Hover effect for tabs */\n"
"QTabBar::tab:hover {\n"
"    background-color: #5c5c5c;\n"
"    color: #fff; /* White text on hover */\n"
"}\n"
"\n"
"/* Remove right border for the last tab */\n"
"QTabBar::tab:last {\n"
"    margin-right: 0;\n"
"}\n"
"\n"
"/* Additional hover effect for better user experience */\n"
"QTabBar::tab:!selected:hover {\n"
"    transform: scale(1.05); /* Slightly enlarge the tab */\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow on hover */\n"
"}\n"
"")
        Crow_Eye.setIconSize(QtCore.QSize(50, 50))
        Crow_Eye.setDockOptions(QtWidgets.QMainWindow.AllowTabbedDocks|QtWidgets.QMainWindow.AnimatedDocks|QtWidgets.QMainWindow.VerticalTabs)
        self.centralwidget = QtWidgets.QWidget(Crow_Eye)
        self.centralwidget.setStyleSheet("/* Style for the tab widget */\n"
"QTabWidget::pane {\n"
"    border: 1px solid #444;\n"
"    border-radius: 8px;\n"
"    background-color: #2c2c2c;\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */\n"
"}\n"
"\n"
"/* Style for each tab */\n"
"QTabBar::tab {\n"
"    padding: 10px 20px;\n"
"    color: #bbb; /* Lighter text color */\n"
"    background-color: #3c3c3c;\n"
"    border: 1px solid #4c4c4c;\n"
"    border-top-left-radius: 5px;\n"
"    border-top-right-radius: 5px;\n"
"    margin-right: -1px; /* Ensures adjacent tabs have no gap */\n"
"    transition: background-color 0.3s ease, color 0.3s ease; /* Smooth color transition */\n"
"}\n"
"\n"
"/* Style for the active tab */\n"
"QTabBar::tab:selected {\n"
"    background-color: #4c4c4c;\n"
"    color: #66ff66; /* Softer green text for active tab */\n"
"}\n"
"\n"
"/* Hover effect for tabs */\n"
"QTabBar::tab:hover {\n"
"    background-color: #5c5c5c;\n"
"    color: #fff; /* White text on hover */\n"
"}\n"
"\n"
"/* Remove right border for the last tab */\n"
"QTabBar::tab:last {\n"
"    margin-right: 0;\n"
"}\n"
"\n"
"/* Additional hover effect for better user experience */\n"
"QTabBar::tab:!selected:hover {\n"
"    transform: scale(1.05); /* Slightly enlarge the tab */\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow on hover */\n"
"}\n"
"")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.top_frame = QtWidgets.QFrame(self.centralwidget)
        self.top_frame.setStyleSheet(" background-color: #001f3f;\n"
"font: 81 8pt \"Rockwell Extra Bold\";\n"
"")
        self.top_frame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.top_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.top_frame.setObjectName("top_frame")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.top_frame)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setSpacing(0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.main_menu = QtWidgets.QPushButton(self.top_frame)
        self.main_menu.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(5)
        sizePolicy.setVerticalStretch(5)
        sizePolicy.setHeightForWidth(self.main_menu.sizePolicy().hasHeightForWidth())
        self.main_menu.setSizePolicy(sizePolicy)
        self.main_menu.setMinimumSize(QtCore.QSize(4, 4))
        self.main_menu.setBaseSize(QtCore.QSize(5, 5))
        font = QtGui.QFont()
        font.setFamily("Rockwell Extra Bold")
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(10)
        self.main_menu.setFont(font)
        self.main_menu.setToolTip("")
        self.main_menu.setAutoFillBackground(False)
        self.main_menu.setStyleSheet("QPushButton {\n"
"    color: white;\n"
"    border-radius: 5px;\n"
"    background-color: rgb(0, 0, 0);\n"
"    image: url(:/Icons/main-menu.png);\n"
"    border: 2px solid rgb(255, 255, 255); /* Added border property */\n"
"    transition: background-color 0.3s, border-color 0.3s;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: rgb(50, 50, 50); /* Lighter background color on hover */\n"
"    border-color: rgb(200, 200, 200); /* Lighter border color on hover */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: rgb(100, 100, 100); /* Even lighter background color on press */\n"
"    border-color: rgb(150, 150, 150); /* Even lighter border color on press */\n"
"}image: url(:/Icons/main-menu.png);")
        self.main_menu.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/Logo/main-menu.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.main_menu.setIcon(icon1)
        self.main_menu.setIconSize(QtCore.QSize(60, 60))
        self.main_menu.setCheckable(True)
        self.main_menu.setChecked(False)
        self.main_menu.setFlat(False)
        self.main_menu.setObjectName("main_menu")
        self.horizontalLayout_3.addWidget(self.main_menu)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem)
        self.label = QtWidgets.QLabel(self.top_frame)
        self.label.setEnabled(True)
        font = QtGui.QFont()
        font.setFamily("Rockwell Extra Bold")
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(10)
        self.label.setFont(font)
        self.label.setAutoFillBackground(False)
        self.label.setStyleSheet("\n"
"color: white; border-radius: 5px;\n"
"")
        self.label.setObjectName("label")
        self.horizontalLayout_3.addWidget(self.label)
        spacerItem1 = QtWidgets.QSpacerItem(300, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem1)
        self.verticalLayout_2.addWidget(self.top_frame)
        self.Main_frame = QtWidgets.QFrame(self.centralwidget)
        self.Main_frame.setAutoFillBackground(False)
        self.Main_frame.setStyleSheet("background-color: rgb(4, 6, 20);")
        self.Main_frame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Main_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Main_frame.setObjectName("Main_frame")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.Main_frame)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.side_fram = QtWidgets.QFrame(self.Main_frame)
        self.side_fram.setStyleSheet("color: rgb(26, 95, 180);\n"
"background-color: rgb(0, 0, 0);\n"
"\n"
"")
        self.side_fram.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.side_fram.setFrameShadow(QtWidgets.QFrame.Raised)
        self.side_fram.setObjectName("side_fram")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.side_fram)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_2 = QtWidgets.QLabel(self.side_fram)
        self.label_2.setAutoFillBackground(False)
        self.label_2.setStyleSheet("font: 81 14pt \"Rockwell Extra Bold\";\n"
"color: rgb(31, 136, 23);")
        self.label_2.setObjectName("label_2")
        self.verticalLayout_3.addWidget(self.label_2)
        self.registrybutton = QtWidgets.QPushButton(self.side_fram)
        self.registrybutton.setAutoFillBackground(False)
        self.registrybutton.setStyleSheet("QPushButton {\n"
"    font: 75 11pt \"Noto Sans Canadian Aboriginal\";\n"
"    font-weight: bold;\n"
"    letter-spacing: 1px; /* Adjust for desired spacing */\n"
"    border: none;\n"
"    border-radius: 11px;  /* Adjust for desired radius */\n"
"    color: white;\n"
"    background-color: #001f3f; /* Navy background color */\n"
"    padding: 1em 2em;\n"
"    transition: background-color 0.3s, color 0.3s, box-shadow 0.3s;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #003366; /* Slightly lighter navy on hover */\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Add shadow on hover */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    border: 2px solid #cccccc; /* Adjust border width and color */\n"
"    color: green; /* Adjust pressed color */\n"
"    background-color: #002244; /* Darker navy on press */\n"
"    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* Reduce shadow on press */\n"
"    transform: translateY(2px); /* Slightly move button down on press */\n"
"}\n"
"")
        self.registrybutton.setCheckable(True)
        self.registrybutton.setChecked(True)
        self.registrybutton.setDefault(True)
        self.registrybutton.setObjectName("registrybutton")
        self.verticalLayout_3.addWidget(self.registrybutton)
        self.lnkbutton = QtWidgets.QPushButton(self.side_fram)
        self.lnkbutton.setStyleSheet("QPushButton {\n"
"    font: 75 11pt \"Noto Sans Canadian Aboriginal\";\n"
"    font-weight: bold;\n"
"    letter-spacing: 1px; /* Adjust for desired spacing */\n"
"    border: none;\n"
"    border-radius: 11px;  /* Adjust for desired radius */\n"
"    color: white;\n"
"    background-color: #001f3f; /* Navy background color */\n"
"    padding: 1em 2em;\n"
"    transition: background-color 0.3s, color 0.3s, box-shadow 0.3s;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #003366; /* Slightly lighter navy on hover */\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Add shadow on hover */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    border: 2px solid #cccccc; /* Adjust border width and color */\n"
"    color: green; /* Adjust pressed color */\n"
"    background-color: #002244; /* Darker navy on press */\n"
"    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* Reduce shadow on press */\n"
"    transform: translateY(2px); /* Slightly move button down on press */\n"
"}")
        self.lnkbutton.setCheckable(True)
        self.lnkbutton.setChecked(True)
        self.lnkbutton.setObjectName("lnkbutton")
        self.verticalLayout_3.addWidget(self.lnkbutton)
        self.Jumblistbutton = QtWidgets.QPushButton(self.side_fram)
        self.Jumblistbutton.setStyleSheet("QPushButton {\n"
"    font: 75 11pt \"Noto Sans Canadian Aboriginal\";\n"
"    font-weight: bold;\n"
"    letter-spacing: 1px; /* Adjust for desired spacing */\n"
"    border: none;\n"
"    border-radius: 11px;  /* Adjust for desired radius */\n"
"    color: white;\n"
"    background-color: #001f3f; /* Navy background color */\n"
"    padding: 1em 2em;\n"
"    transition: background-color 0.3s, color 0.3s, box-shadow 0.3s;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #003366; /* Slightly lighter navy on hover */\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Add shadow on hover */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    border: 2px solid #cccccc; /* Adjust border width and color */\n"
"    color: green; /* Adjust pressed color */\n"
"    background-color: #002244; /* Darker navy on press */\n"
"    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* Reduce shadow on press */\n"
"    transform: translateY(2px); /* Slightly move button down on press */\n"
"}")
        self.Jumblistbutton.setCheckable(True)
        self.Jumblistbutton.setChecked(True)
        self.Jumblistbutton.setObjectName("Jumblistbutton")
        self.verticalLayout_3.addWidget(self.Jumblistbutton)
        self.filesactivitybutton = QtWidgets.QPushButton(self.side_fram)
        self.filesactivitybutton.setStyleSheet("QPushButton {\n"
"    font: 75 11pt \"Noto Sans Canadian Aboriginal\";\n"
"    font-weight: bold;\n"
"    letter-spacing: 1px; /* Adjust for desired spacing */\n"
"    border: none;\n"
"    border-radius: 11px;  /* Adjust for desired radius */\n"
"    color: white;\n"
"    background-color: #001f3f; /* Navy background color */\n"
"    padding: 1em 2em;\n"
"    transition: background-color 0.3s, color 0.3s, box-shadow 0.3s;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #003366; /* Slightly lighter navy on hover */\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Add shadow on hover */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    border: 2px solid #cccccc; /* Adjust border width and color */\n"
"    color: green; /* Adjust pressed color */\n"
"    background-color: #002244; /* Darker navy on press */\n"
"    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* Reduce shadow on press */\n"
"    transform: translateY(2px); /* Slightly move button down on press */\n"
"}")
        self.filesactivitybutton.setCheckable(True)
        self.filesactivitybutton.setChecked(True)
        self.filesactivitybutton.setObjectName("filesactivitybutton")
        self.verticalLayout_3.addWidget(self.filesactivitybutton)
        self.Prefetchbutton = QtWidgets.QPushButton(self.side_fram)
        font = QtGui.QFont()
        font.setFamily("Noto Sans Canadian Aboriginal")
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.Prefetchbutton.setFont(font)
        self.Prefetchbutton.setStyleSheet("QPushButton {\n"
"    font: 75 11pt \"Noto Sans Canadian Aboriginal\";\n"
"    font-weight: bold;\n"
"    letter-spacing: 1px; /* Adjust for desired spacing */\n"
"    border: none;\n"
"    border-radius: 11px;  /* Adjust for desired radius */\n"
"    color: white;\n"
"    background-color: #001f3f; /* Navy background color */\n"
"    padding: 1em 2em;\n"
"    transition: background-color 0.3s, color 0.3s, box-shadow 0.3s;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #003366; /* Slightly lighter navy on hover */\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Add shadow on hover */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    border: 2px solid #cccccc; /* Adjust border width and color */\n"
"    color: green; /* Adjust pressed color */\n"
"    background-color: #002244; /* Darker navy on press */\n"
"    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* Reduce shadow on press */\n"
"    transform: translateY(2px); /* Slightly move button down on press */\n"
"}")
        self.Prefetchbutton.setCheckable(True)
        self.Prefetchbutton.setChecked(True)
        self.Prefetchbutton.setDefault(True)
        self.Prefetchbutton.setObjectName("Prefetchbutton")
        self.verticalLayout_3.addWidget(self.Prefetchbutton)
        self.logbutton = QtWidgets.QPushButton(self.side_fram)
        self.logbutton.setStyleSheet("QPushButton {\n"
"    font: 75 11pt \"Noto Sans Canadian Aboriginal\";\n"
"    font-weight: bold;\n"
"    letter-spacing: 1px; /* Adjust for desired spacing */\n"
"    border: none;\n"
"    border-radius: 11px;  /* Adjust for desired radius */\n"
"    color: white;\n"
"    background-color: #001f3f; /* Navy background color */\n"
"    padding: 1em 2em;\n"
"    transition: background-color 0.3s, color 0.3s, box-shadow 0.3s;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #003366; /* Slightly lighter navy on hover */\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Add shadow on hover */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    border: 2px solid #cccccc; /* Adjust border width and color */\n"
"    color: green; /* Adjust pressed color */\n"
"    background-color: #002244; /* Darker navy on press */\n"
"    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* Reduce shadow on press */\n"
"    transform: translateY(2px); /* Slightly move button down on press */\n"
"}")
        self.logbutton.setCheckable(True)
        self.logbutton.setChecked(True)
        self.logbutton.setObjectName("logbutton")
        self.verticalLayout_3.addWidget(self.logbutton)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem2)
        self.label_3 = QtWidgets.QLabel(self.side_fram)
        font = QtGui.QFont()
        font.setFamily("Rockwell Extra Bold")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(10)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("font: 81 10pt \"Rockwell Extra Bold\";\n"
"color: rgb(31, 136, 23);")
        self.label_3.setObjectName("label_3")
        self.verticalLayout_3.addWidget(self.label_3)
        self.time_line_button = QtWidgets.QPushButton(self.side_fram)
        self.time_line_button.setStyleSheet("QPushButton {\n"
"    font: 75 11pt \"Noto Sans Canadian Aboriginal\";\n"
"    font-weight: bold;\n"
"    letter-spacing: 1px; /* Adjust for desired spacing */\n"
"    border: none;\n"
"    border-radius: 11px;  /* Adjust for desired radius */\n"
"    color: white;\n"
"    background-color: #001f3f; /* Navy background color */\n"
"    padding: 1em 2em;\n"
"    transition: background-color 0.3s, color 0.3s, box-shadow 0.3s;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #003366; /* Slightly lighter navy on hover */\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Add shadow on hover */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    border: 2px solid #cccccc; /* Adjust border width and color */\n"
"    color: green; /* Adjust pressed color */\n"
"    background-color: #002244; /* Darker navy on press */\n"
"    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* Reduce shadow on press */\n"
"    transform: translateY(2px); /* Slightly move button down on press */\n"
"}")
        self.time_line_button.setCheckable(True)
        self.time_line_button.setChecked(True)
        self.time_line_button.setObjectName("time_line_button")
        self.verticalLayout_3.addWidget(self.time_line_button)
        self.horizontalLayout_2.addWidget(self.side_fram)
        self.info_frame = QtWidgets.QFrame(self.Main_frame)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.info_frame.setFont(font)
        self.info_frame.setStyleSheet("QTableWidget {\n"
"    border: 1px solid #ccc;\n"
"    border-radius: 5px;\n"
"    background-color: #f9f9f9;\n"
"    gridline-color: #ddd;\n"
"    font: bold 10pt \"MS Shell Dlg 2\"; /* Changed font to bold and increased size */\n"
"}\n"
"\n"
"/* Style for the table header */\n"
"QHeaderView::section {\n"
"    background-color: #4a90e2; /* Blue color for the header */\n"
"    color: white;\n"
"    padding: 5px;\n"
"    border: 1px solid #ccc;\n"
"    font: bold 10pt \"MS Shell Dlg 2\"; /* Changed font to bold */\n"
"}\n"
"\n"
"/* Style for the table cells */\n"
"QTableWidget::item {\n"
"    padding: 5px;\n"
"    border: 1px solid #ccc; /* Added border to table cells */\n"
"    background-color: #ffffff;\n"
"    color: #333;\n"
"    font: bold 10pt \"MS Shell Dlg 2\"; /* Changed font to bold */\n"
"}\n"
"\n"
"/* Alternate row colors */\n"
"QTableWidget::item:alternate {\n"
"    background-color: #f1f1f1;\n"
"}\n"
"\n"
"/* Hover effect for table cells */\n"
"QTableWidget::item:hover {\n"
"    background-color: #e0e0e0;\n"
"}\n"
"\n"
"/* Selected cell style */\n"
"QTableWidget::item:selected {\n"
"    background-color: #4a90e2;\n"
"    color: white;\n"
"    border: 1px solid #4a90e2; /* Match border color with background color */\n"
"}")
        self.info_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.info_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.info_frame.setObjectName("info_frame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.info_frame)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame_3 = QtWidgets.QFrame(self.info_frame)
        self.frame_3.setStyleSheet("/* Style for the tab widget */\n"
"QTabWidget::pane {\n"
"    border: 1px solid #444;\n"
"    border-radius: 8px;\n"
"    background-color: #2c2c2c;\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */\n"
"}\n"
"\n"
"/* Style for each tab */\n"
"QTabBar::tab {\n"
"    padding: 10px 20px;\n"
"    color: #bbb; /* Lighter text color */\n"
"    background-color: #3c3c3c;\n"
"    border: 1px solid #4c4c4c;\n"
"    border-top-left-radius: 5px;\n"
"    border-top-right-radius: 5px;\n"
"    margin-right: -1px; /* Ensures adjacent tabs have no gap */\n"
"    transition: background-color 0.3s ease, color 0.3s ease; /* Smooth color transition */\n"
"}\n"
"\n"
"/* Style for the active tab */\n"
"QTabBar::tab:selected {\n"
"    background-color: #4c4c4c;\n"
"    color: #66ff66; /* Softer green text for active tab */\n"
"}\n"
"\n"
"/* Hover effect for tabs */\n"
"QTabBar::tab:hover {\n"
"    background-color: #5c5c5c;\n"
"    color: #fff; /* White text on hover */\n"
"}\n"
"\n"
"/* Remove right border for the last tab */\n"
"QTabBar::tab:last {\n"
"    margin-right: 0;\n"
"}\n"
"\n"
"/* Additional hover effect for better user experience */\n"
"QTabBar::tab:!selected:hover {\n"
"    transform: scale(1.05); /* Slightly enlarge the tab */\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow on hover */\n"
"}\n"
"")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.frame_3)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.pushButton_16 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_16.setStyleSheet("QPushButton {\n"
"   \n"
"    background-color: rgb(50, 143, 29);\n"
"    border: none;\n"
"    color: rgb(255, 255, 255);\n"
"    padding: 7px 15px;\n"
"    text-align: center;\n"
"    text-decoration: none;\n"
"    display: inline-block;\n"
"    font-size: 16px;\n"
"    margin: 4px 2px;\n"
"    border-radius: 12px;\n"
"    transition-duration: 0.4s;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"   \n"
"    background-color: rgb(213, 112, 23);\n"
"    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #3a6ca4;\n"
"    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n"
"    transform: translateY(2px);\n"
"}\n"
"")
        self.pushButton_16.setObjectName("pushButton_16")
        self.horizontalLayout_6.addWidget(self.pushButton_16)
        self.lineEdit = QtWidgets.QLineEdit(self.frame_3)
        self.lineEdit.setStyleSheet("QLineEdit {\n"
"    border: 2px solid #8f8f91;\n"
"    border-radius: 15px;\n"
"    padding: 5px;\n"
"    background-color: #f0f0f0;\n"
"    font: 81 8pt \"Rockwell Extra Bold\";\n"
"    transition: border-color 0.3s ease;\n"
"}\n"
"\n"
"QLineEdit:focus {\n"
"    border: 2px solid #5d9cec;\n"
"    background-color: #ffffff;\n"
"    box-shadow: 0 0 10px #5d9cec;\n"
"}\n"
"\n"
"")
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout_6.addWidget(self.lineEdit)
        self.add_files = QtWidgets.QPushButton(self.frame_3)
        self.add_files.setStyleSheet("QPushButton{color:rgb(255, 255, 255);\n"
"background-color: rgb(198, 70, 0);\n"
"border-color: rgb(255, 255, 255);}\n"
"\n"
"QPushButton:pressed {\n"
"  /* Add border on press */\n"
"  border: 2px solid #cccccc; /* Adjust border width and color */\n"
"  /* Change color on press */\n"
"  color: green ; /* Adjust pressed color */\n"
"}")
        self.add_files.setObjectName("add_files")
        self.horizontalLayout_6.addWidget(self.add_files)
        self.verticalLayout.addWidget(self.frame_3)
        self.Main_Tab = QtWidgets.QTabWidget(self.info_frame)
        self.Main_Tab.setMinimumSize(QtCore.QSize(300, 0))
        self.Main_Tab.setBaseSize(QtCore.QSize(3000, 0))
        self.Main_Tab.setAutoFillBackground(False)
        self.Main_Tab.setStyleSheet("font: 81 9pt \"Rockwell Extra Bold\";\n"
"")
        self.Main_Tab.setTabPosition(QtWidgets.QTabWidget.North)
        self.Main_Tab.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.Main_Tab.setIconSize(QtCore.QSize(30, 16))
        self.Main_Tab.setElideMode(QtCore.Qt.ElideMiddle)
        self.Main_Tab.setTabsClosable(False)
        self.Main_Tab.setMovable(True)
        self.Main_Tab.setTabBarAutoHide(True)
        self.Main_Tab.setObjectName("Main_Tab")
        self.Registry_Tab = QtWidgets.QWidget()
        self.Registry_Tab.setStyleSheet("")
        self.Registry_Tab.setObjectName("Registry_Tab")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.Registry_Tab)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.filter = QtWidgets.QPushButton(self.Registry_Tab)
        self.filter.setStyleSheet("QPushButton {\n"
"   \n"
"    background-color: rgb(50, 143, 29);\n"
"    border: none;\n"
"    color: rgb(255, 255, 255);\n"
"    padding: 7px 15px;\n"
"    text-align: center;\n"
"    text-decoration: none;\n"
"    display: inline-block;\n"
"    font-size: 16px;\n"
"    margin: 4px 2px;\n"
"    border-radius: 12px;\n"
"    transition-duration: 0.4s;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"   \n"
"    background-color: rgb(213, 112, 23);\n"
"    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #3a6ca4;\n"
"    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n"
"    transform: translateY(2px);\n"
"}\n"
"")
        self.filter.setObjectName("filter")
        self.horizontalLayout_4.addWidget(self.filter)
        self.Searchbar = QtWidgets.QLineEdit(self.Registry_Tab)
        self.Searchbar.setStyleSheet("QLineEdit {\n"
"    border: 2px solid #8f8f91;\n"
"    border-radius: 15px;\n"
"    padding: 5px;\n"
"    background-color: #f0f0f0;\n"
"    font-size: 16px;\n"
"    transition: border-color 0.3s ease;\n"
"}\n"
"\n"
"QLineEdit:focus {\n"
"    border: 2px solid #5d9cec;\n"
"    background-color: #ffffff;\n"
"    box-shadow: 0 0 10px #5d9cec;\n"
"}")
        self.Searchbar.setObjectName("Searchbar")
        self.horizontalLayout_4.addWidget(self.Searchbar)
        self.verticalLayout_4.addLayout(self.horizontalLayout_4)
        self.Registry_widget = QtWidgets.QTabWidget(self.Registry_Tab)
        self.Registry_widget.setStyleSheet("/* Container for the tab widget */\n"
".tab-container {\n"
"  display: flex;\n"
"  background-color: #333;\n"
"  border: 1px solid #444;\n"
"  border-radius: 5px;\n"
"  overflow: hidden;\n"
"}\n"
"\n"
"/* Style for each tab */\n"
".tab {\n"
"  flex: 1;\n"
"  padding: 10px 20px;\n"
"  text-align: center;\n"
"  color: white;\n"
"  background-color: #444;\n"
"  border-right: 1px solid #555;\n"
"  cursor: pointer;\n"
"  transition: background-color 0.3s ease;\n"
"}\n"
"\n"
"/* Remove border for the last tab */\n"
".tab:last-child {\n"
"  border-right: none;\n"
"}\n"
"\n"
"/* Style for the active tab */\n"
".tab.active {\n"
"  background-color: #555;\n"
"  color: #00ff00; /* Green text for active tab */\n"
"}\n"
"\n"
"/* Hover effect for tabs */\n"
".tab:hover {\n"
"  background-color: #666;\n"
"}\n"
"\n"
"")
        self.Registry_widget.setMovable(True)
        self.Registry_widget.setObjectName("Registry_widget")
        self.computer_Name = QtWidgets.QWidget()
        self.computer_Name.setAutoFillBackground(False)
        self.computer_Name.setObjectName("computer_Name")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.computer_Name)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.computerName_table = QtWidgets.QTableWidget(self.computer_Name)
        self.computerName_table.setStyleSheet("")
        self.computerName_table.setObjectName("computerName_table")
        self.computerName_table.setColumnCount(3)
        self.computerName_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.computerName_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.computerName_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.computerName_table.setHorizontalHeaderItem(2, item)
        self.computerName_table.horizontalHeader().setDefaultSectionSize(300)
        self.verticalLayout_6.addWidget(self.computerName_table)
        self.Registry_widget.addTab(self.computer_Name, "")
        self.Time_Zone = QtWidgets.QWidget()
        self.Time_Zone.setObjectName("Time_Zone")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.Time_Zone)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.TimeZone_table = QtWidgets.QTableWidget(self.Time_Zone)
        self.TimeZone_table.setObjectName("TimeZone_table")
        self.TimeZone_table.setColumnCount(3)
        self.TimeZone_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.TimeZone_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.TimeZone_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.TimeZone_table.setHorizontalHeaderItem(2, item)
        self.TimeZone_table.horizontalHeader().setDefaultSectionSize(300)
        self.verticalLayout_7.addWidget(self.TimeZone_table)
        self.Registry_widget.addTab(self.Time_Zone, "")
        self.NetworkInterfaces_tab = QtWidgets.QWidget()
        self.NetworkInterfaces_tab.setObjectName("NetworkInterfaces_tab")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.NetworkInterfaces_tab)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.NetworkInterface_table = QtWidgets.QTableWidget(self.NetworkInterfaces_tab)
        self.NetworkInterface_table.setObjectName("NetworkInterface_table")
        self.NetworkInterface_table.setColumnCount(4)
        self.NetworkInterface_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.NetworkInterface_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.NetworkInterface_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.NetworkInterface_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.NetworkInterface_table.setHorizontalHeaderItem(3, item)
        self.NetworkInterface_table.horizontalHeader().setDefaultSectionSize(300)
        self.verticalLayout_8.addWidget(self.NetworkInterface_table)
        self.Registry_widget.addTab(self.NetworkInterfaces_tab, "")
        self.Networklists = QtWidgets.QWidget()
        self.Networklists.setObjectName("Networklists")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.Networklists)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.NetworkLists_table = QtWidgets.QTableWidget(self.Networklists)
        self.NetworkLists_table.setStyleSheet("/* Style for the tab widget */\n"
"QTabWidget::pane {\n"
"    border: 1px solid #3c3c3c;\n"
"    border-radius: 8px;\n"
"    background-color: #2c2c2c;\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */\n"
"}\n"
"\n"
"/* Style for each tab */\n"
"QTabBar::tab {\n"
"    padding: 10px 20px;\n"
"    color: #ddd; /* Lighter text color */\n"
"    background-color: #3c3c3c;\n"
"    border: 1px solid #4c4c4c;\n"
"    border-top-left-radius: 5px;\n"
"    border-top-right-radius: 5px;\n"
"    margin-right: -1px; /* Ensures adjacent tabs have no gap */\n"
"    transition: background-color 0.3s ease, color 0.3s ease; /* Smooth color transition */\n"
"}\n"
"\n"
"/* Style for the active tab */\n"
"QTabBar::tab:selected {\n"
"    background-color: #4c4c4c;\n"
"    color: #66ff66; /* Softer green text for active tab */\n"
"}\n"
"\n"
"/* Hover effect for tabs */\n"
"QTabBar::tab:hover {\n"
"    background-color: #5c5c5c;\n"
"    color: #fff; /* White text on hover */\n"
"}\n"
"\n"
"/* Remove right border for the last tab */\n"
"QTabBar::tab:last {\n"
"    margin-right: 0;\n"
"}\n"
"\n"
"/* Additional hover effect for better user experience */\n"
"QTabBar::tab:!selected:hover {\n"
"    transform: scale(1.05); /* Slightly enlarge the tab */\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow on hover */\n"
"}\n"
"")
        self.NetworkLists_table.setObjectName("NetworkLists_table")
        self.NetworkLists_table.setColumnCount(4)
        self.NetworkLists_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.NetworkLists_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.NetworkLists_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.NetworkLists_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.NetworkLists_table.setHorizontalHeaderItem(3, item)
        self.NetworkLists_table.horizontalHeader().setDefaultSectionSize(300)
        self.verticalLayout_9.addWidget(self.NetworkLists_table)
        self.Registry_widget.addTab(self.Networklists, "")
        self.MachineRun = QtWidgets.QWidget()
        self.MachineRun.setObjectName("MachineRun")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.MachineRun)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.MachineRun_table = QtWidgets.QTableWidget(self.MachineRun)
        self.MachineRun_table.setStyleSheet("/* Style for the tab widget */\n"
"QTabWidget::pane {\n"
"    border: 1px solid #3c3c3c;\n"
"    border-radius: 8px;\n"
"    background-color: #2c2c2c;\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */\n"
"}\n"
"\n"
"/* Style for each tab */\n"
"QTabBar::tab {\n"
"    padding: 10px 20px;\n"
"    color: #ddd; /* Lighter text color */\n"
"    background-color: #3c3c3c;\n"
"    border: 1px solid #4c4c4c;\n"
"    border-top-left-radius: 5px;\n"
"    border-top-right-radius: 5px;\n"
"    margin-right: -1px; /* Ensures adjacent tabs have no gap */\n"
"    transition: background-color 0.3s ease, color 0.3s ease; /* Smooth color transition */\n"
"}\n"
"\n"
"/* Style for the active tab */\n"
"QTabBar::tab:selected {\n"
"    background-color: #4c4c4c;\n"
"    color: #66ff66; /* Softer green text for active tab */\n"
"}\n"
"\n"
"/* Hover effect for tabs */\n"
"QTabBar::tab:hover {\n"
"    background-color: #5c5c5c;\n"
"    color: #fff; /* White text on hover */\n"
"}\n"
"\n"
"/* Remove right border for the last tab */\n"
"QTabBar::tab:last {\n"
"    margin-right: 0;\n"
"}\n"
"\n"
"/* Additional hover effect for better user experience */\n"
"QTabBar::tab:!selected:hover {\n"
"    transform: scale(1.05); /* Slightly enlarge the tab */\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow on hover */\n"
"}\n"
"")
        self.MachineRun_table.setObjectName("MachineRun_table")
        self.MachineRun_table.setColumnCount(3)
        self.MachineRun_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.MachineRun_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.MachineRun_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.MachineRun_table.setHorizontalHeaderItem(2, item)
        self.MachineRun_table.horizontalHeader().setDefaultSectionSize(300)
        self.MachineRun_table.horizontalHeader().setMinimumSectionSize(300)
        self.verticalLayout_11.addWidget(self.MachineRun_table)
        self.Registry_widget.addTab(self.MachineRun, "")
        self.Machine_run_once = QtWidgets.QWidget()
        self.Machine_run_once.setObjectName("Machine_run_once")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.Machine_run_once)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.MachineRunOnce_tabel = QtWidgets.QTableWidget(self.Machine_run_once)
        self.MachineRunOnce_tabel.setObjectName("MachineRunOnce_tabel")
        self.MachineRunOnce_tabel.setColumnCount(3)
        self.MachineRunOnce_tabel.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.MachineRunOnce_tabel.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.MachineRunOnce_tabel.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.MachineRunOnce_tabel.setHorizontalHeaderItem(2, item)
        self.MachineRunOnce_tabel.horizontalHeader().setDefaultSectionSize(300)
        self.verticalLayout_12.addWidget(self.MachineRunOnce_tabel)
        self.Registry_widget.addTab(self.Machine_run_once, "")
        self.User_run = QtWidgets.QWidget()
        self.User_run.setObjectName("User_run")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.User_run)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.UserRun_table = QtWidgets.QTableWidget(self.User_run)
        self.UserRun_table.setStyleSheet("/* Style for the tab widget */\n"
"QTabWidget::pane {\n"
"    border: 1px solid #3c3c3c;\n"
"    border-radius: 8px;\n"
"    background-color: #2c2c2c;\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */\n"
"}\n"
"\n"
"/* Style for each tab */\n"
"QTabBar::tab {\n"
"    padding: 10px 20px;\n"
"    color: #ddd; /* Lighter text color */\n"
"    background-color: #3c3c3c;\n"
"    border: 1px solid #4c4c4c;\n"
"    border-top-left-radius: 5px;\n"
"    border-top-right-radius: 5px;\n"
"    margin-right: -1px; /* Ensures adjacent tabs have no gap */\n"
"    transition: background-color 0.3s ease, color 0.3s ease; /* Smooth color transition */\n"
"}\n"
"\n"
"/* Style for the active tab */\n"
"QTabBar::tab:selected {\n"
"    background-color: #4c4c4c;\n"
"    color: #66ff66; /* Softer green text for active tab */\n"
"}\n"
"\n"
"/* Hover effect for tabs */\n"
"QTabBar::tab:hover {\n"
"    background-color: #5c5c5c;\n"
"    color: #fff; /* White text on hover */\n"
"}\n"
"\n"
"/* Remove right border for the last tab */\n"
"QTabBar::tab:last {\n"
"    margin-right: 0;\n"
"}\n"
"\n"
"/* Additional hover effect for better user experience */\n"
"QTabBar::tab:!selected:hover {\n"
"    transform: scale(1.05); /* Slightly enlarge the tab */\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow on hover */\n"
"}\n"
"")
        self.UserRun_table.setObjectName("UserRun_table")
        self.UserRun_table.setColumnCount(3)
        self.UserRun_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.UserRun_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.UserRun_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.UserRun_table.setHorizontalHeaderItem(2, item)
        self.UserRun_table.horizontalHeader().setDefaultSectionSize(300)
        self.verticalLayout_13.addWidget(self.UserRun_table)
        self.Registry_widget.addTab(self.User_run, "")
        self.User_run_once = QtWidgets.QWidget()
        self.User_run_once.setObjectName("User_run_once")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout(self.User_run_once)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.UserRunOnce_table = QtWidgets.QTableWidget(self.User_run_once)
        self.UserRunOnce_table.setObjectName("UserRunOnce_table")
        self.UserRunOnce_table.setColumnCount(3)
        self.UserRunOnce_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.UserRunOnce_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.UserRunOnce_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.UserRunOnce_table.setHorizontalHeaderItem(2, item)
        self.UserRunOnce_table.horizontalHeader().setDefaultSectionSize(300)
        self.verticalLayout_14.addWidget(self.UserRunOnce_table)
        self.Registry_widget.addTab(self.User_run_once, "")
        self.Last_update = QtWidgets.QWidget()
        self.Last_update.setObjectName("Last_update")
        self.verticalLayout_15 = QtWidgets.QVBoxLayout(self.Last_update)
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.LastUpdate_table = QtWidgets.QTableWidget(self.Last_update)
        self.LastUpdate_table.setObjectName("LastUpdate_table")
        self.LastUpdate_table.setColumnCount(3)
        self.LastUpdate_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.LastUpdate_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.LastUpdate_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.LastUpdate_table.setHorizontalHeaderItem(2, item)
        self.LastUpdate_table.horizontalHeader().setDefaultSectionSize(300)
        self.verticalLayout_15.addWidget(self.LastUpdate_table)
        self.Registry_widget.addTab(self.Last_update, "")
        self.Lstupdate_info = QtWidgets.QWidget()
        self.Lstupdate_info.setObjectName("Lstupdate_info")
        self.verticalLayout_16 = QtWidgets.QVBoxLayout(self.Lstupdate_info)
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.LastUpdateInfo_table = QtWidgets.QTableWidget(self.Lstupdate_info)
        self.LastUpdateInfo_table.setStyleSheet("/* Style for the tab widget */\n"
"QTabWidget::pane {\n"
"    border: 1px solid #3c3c3c;\n"
"    border-radius: 8px;\n"
"    background-color: #2c2c2c;\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */\n"
"}\n"
"\n"
"/* Style for each tab */\n"
"QTabBar::tab {\n"
"    padding: 10px 20px;\n"
"    color: #ddd; /* Lighter text color */\n"
"    background-color: #3c3c3c;\n"
"    border: 1px solid #4c4c4c;\n"
"    border-top-left-radius: 5px;\n"
"    border-top-right-radius: 5px;\n"
"    margin-right: -1px; /* Ensures adjacent tabs have no gap */\n"
"    transition: background-color 0.3s ease, color 0.3s ease; /* Smooth color transition */\n"
"}\n"
"\n"
"/* Style for the active tab */\n"
"QTabBar::tab:selected {\n"
"    background-color: #4c4c4c;\n"
"    color: #66ff66; /* Softer green text for active tab */\n"
"}\n"
"\n"
"/* Hover effect for tabs */\n"
"QTabBar::tab:hover {\n"
"    background-color: #5c5c5c;\n"
"    color: #fff; /* White text on hover */\n"
"}\n"
"\n"
"/* Remove right border for the last tab */\n"
"QTabBar::tab:last {\n"
"    margin-right: 0;\n"
"}\n"
"\n"
"/* Additional hover effect for better user experience */\n"
"QTabBar::tab:!selected:hover {\n"
"    transform: scale(1.05); /* Slightly enlarge the tab */\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow on hover */\n"
"}\n"
"")
        self.LastUpdateInfo_table.setFrameShadow(QtWidgets.QFrame.Raised)
        self.LastUpdateInfo_table.setLineWidth(2)
        self.LastUpdateInfo_table.setGridStyle(QtCore.Qt.CustomDashLine)
        self.LastUpdateInfo_table.setObjectName("LastUpdateInfo_table")
        self.LastUpdateInfo_table.setColumnCount(4)
        self.LastUpdateInfo_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.LastUpdateInfo_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.LastUpdateInfo_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.LastUpdateInfo_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.LastUpdateInfo_table.setHorizontalHeaderItem(3, item)
        self.LastUpdateInfo_table.horizontalHeader().setDefaultSectionSize(300)
        self.verticalLayout_16.addWidget(self.LastUpdateInfo_table)
        self.Registry_widget.addTab(self.Lstupdate_info, "")
        self.ShutDown_tab = QtWidgets.QWidget()
        self.ShutDown_tab.setObjectName("ShutDown_tab")
        self.verticalLayout_18 = QtWidgets.QVBoxLayout(self.ShutDown_tab)
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.ShutDown_table = QtWidgets.QTableWidget(self.ShutDown_tab)
        self.ShutDown_table.setStyleSheet("/* Container for the tab widget */\n"
".tab-container {\n"
"  display: flex;\n"
"  background-color: #333;\n"
"  border: 1px solid #444;\n"
"  border-radius: 5px;\n"
"  overflow: hidden;\n"
"}\n"
"\n"
"/* Style for each tab */\n"
".tab {\n"
"  flex: 1;\n"
"  padding: 10px 20px;\n"
"  text-align: center;\n"
"  color: white;\n"
"  background-color: #444;\n"
"  border-right: 1px solid #555;\n"
"  cursor: pointer;\n"
"  transition: background-color 0.3s ease;\n"
"}\n"
"\n"
"/* Remove border for the last tab */\n"
".tab:last-child {\n"
"  border-right: none;\n"
"}\n"
"\n"
"/* Style for the active tab */\n"
".tab.active {\n"
"  background-color: #555;\n"
"  color: #00ff00; /* Green text for active tab */\n"
"}\n"
"\n"
"/* Hover effect for tabs */\n"
".tab:hover {\n"
"  background-color: #666;\n"
"}\n"
"\n"
"")
        self.ShutDown_table.setObjectName("ShutDown_table")
        self.ShutDown_table.setColumnCount(3)
        self.ShutDown_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.ShutDown_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.ShutDown_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.ShutDown_table.setHorizontalHeaderItem(2, item)
        self.ShutDown_table.horizontalHeader().setDefaultSectionSize(300)
        self.verticalLayout_18.addWidget(self.ShutDown_table)
        self.Registry_widget.addTab(self.ShutDown_tab, "")
        self.verticalLayout_4.addWidget(self.Registry_widget)
        self.Main_Tab.addTab(self.Registry_Tab, "")
        self.LNK_AL_Tab = QtWidgets.QWidget()
        self.LNK_AL_Tab.setStyleSheet("border-color: rgb(0, 0, 0);\n"
"border-image: url(:/wallpaper/BD-Seamless-Corded-Regatta-Blue-2.72m-x-11m.jpg);")
        self.LNK_AL_Tab.setObjectName("LNK_AL_Tab")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.LNK_AL_Tab)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton = QtWidgets.QPushButton(self.LNK_AL_Tab)
        self.pushButton.setBaseSize(QtCore.QSize(4, 4))
        font = QtGui.QFont()
        font.setFamily("Rockwell Extra Bold")
        font.setPointSize(-1)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(10)
        font.setStrikeOut(False)
        self.pushButton.setFont(font)
        self.pushButton.setAutoFillBackground(False)
        self.pushButton.setStyleSheet("QPushButton {\n"
"   \n"
"    background-color: rgb(50, 143, 29);\n"
"    border: none;\n"
"    color: rgb(255, 255, 255);\n"
"    padding: 7px 15px;\n"
"    text-align: center;\n"
"    text-decoration: none;\n"
"    display: inline-block;\n"
"    font-size: 16px;\n"
"    margin: 4px 2px;\n"
"    border-radius: 12px;\n"
"    transition-duration: 0.4s;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"   \n"
"    background-color: rgb(213, 112, 23);\n"
"    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #3a6ca4;\n"
"    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n"
"    transform: translateY(2px);\n"
"}\n"
"")
        self.pushButton.setIconSize(QtCore.QSize(40, 40))
        self.pushButton.setCheckable(True)
        self.pushButton.setChecked(True)
        self.pushButton.setAutoRepeat(True)
        self.pushButton.setDefault(True)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.LNK_AL_Tab)
        self.lineEdit_2.setStyleSheet("QLineEdit {\n"
"    border: 2px solid #8f8f91;\n"
"    border-radius: 15px;\n"
"    padding: 5px;\n"
"    background-color: #f0f0f0;\n"
"    font-size: 16px;\n"
"    transition: border-color 0.3s ease;\n"
"}\n"
"\n"
"QLineEdit:focus {\n"
"    border: 2px solid #5d9cec;\n"
"    background-color: #ffffff;\n"
"    box-shadow: 0 0 10px #5d9cec;\n"
"}")
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.horizontalLayout.addWidget(self.lineEdit_2)
        self.verticalLayout_5.addLayout(self.horizontalLayout)
        self.LNK_table = QtWidgets.QTableWidget(self.LNK_AL_Tab)
        self.LNK_table.setMinimumSize(QtCore.QSize(2, 2))
        font = QtGui.QFont()
        font.setFamily("Rockwell Extra Bold")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(10)
        self.LNK_table.setFont(font)
        self.LNK_table.setAutoFillBackground(True)
        self.LNK_table.setStyleSheet("/* Style for the tab widget */\n"
"QTabWidget::pane {\n"
"    border: 1px solid #3c3c3c;\n"
"    border-radius: 8px;\n"
"    background-color: #2c2c2c;\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */\n"
"}\n"
"\n"
"/* Style for each tab */\n"
"QTabBar::tab {\n"
"    padding: 10px 20px;\n"
"    color: #ddd; /* Lighter text color */\n"
"    background-color: #3c3c3c;\n"
"    border: 1px solid #4c4c4c;\n"
"    border-top-left-radius: 5px;\n"
"    border-top-right-radius: 5px;\n"
"    margin-right: -1px; /* Ensures adjacent tabs have no gap */\n"
"    transition: background-color 0.3s ease, color 0.3s ease; /* Smooth color transition */\n"
"}\n"
"\n"
"/* Style for the active tab */\n"
"QTabBar::tab:selected {\n"
"    background-color: #4c4c4c;\n"
"    color: #66ff66; /* Softer green text for active tab */\n"
"}\n"
"\n"
"/* Hover effect for tabs */\n"
"QTabBar::tab:hover {\n"
"    background-color: #5c5c5c;\n"
"    color: #fff; /* White text on hover */\n"
"}\n"
"\n"
"/* Remove right border for the last tab */\n"
"QTabBar::tab:last {\n"
"    margin-right: 0;\n"
"}\n"
"\n"
"/* Additional hover effect for better user experience */\n"
"QTabBar::tab:!selected:hover {\n"
"    transform: scale(1.05); /* Slightly enlarge the tab */\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow on hover */\n"
"}\n"
"")
        self.LNK_table.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.LNK_table.setDragDropOverwriteMode(False)
        self.LNK_table.setGridStyle(QtCore.Qt.CustomDashLine)
        self.LNK_table.setObjectName("LNK_table")
        self.LNK_table.setColumnCount(33)
        self.LNK_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(11, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(12, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(13, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(14, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(15, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(16, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(17, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(18, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(19, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(20, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(21, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(22, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(23, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(24, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(25, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(26, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(27, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(28, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(29, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(30, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(31, item)
        item = QtWidgets.QTableWidgetItem()
        self.LNK_table.setHorizontalHeaderItem(32, item)
        self.LNK_table.horizontalHeader().setCascadingSectionResizes(False)
        self.LNK_table.horizontalHeader().setDefaultSectionSize(300)
        self.LNK_table.horizontalHeader().setMinimumSectionSize(190)
        self.verticalLayout_5.addWidget(self.LNK_table)
        self.Main_Tab.addTab(self.LNK_AL_Tab, "")
        self.CJL_Tab = QtWidgets.QWidget()
        self.CJL_Tab.setObjectName("CJL_Tab")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.CJL_Tab)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.pushButton_15 = QtWidgets.QPushButton(self.CJL_Tab)
        self.pushButton_15.setStyleSheet("QPushButton {\n"
"   \n"
"    background-color: rgb(50, 143, 29);\n"
"    border: none;\n"
"    color: rgb(255, 255, 255);\n"
"    padding: 7px 15px;\n"
"    text-align: center;\n"
"    text-decoration: none;\n"
"    display: inline-block;\n"
"    font-size: 16px;\n"
"    margin: 4px 2px;\n"
"    border-radius: 12px;\n"
"    transition-duration: 0.4s;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"   \n"
"    background-color: rgb(213, 112, 23);\n"
"    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #3a6ca4;\n"
"    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n"
"    transform: translateY(2px);\n"
"}\n"
"")
        self.pushButton_15.setObjectName("pushButton_15")
        self.horizontalLayout_10.addWidget(self.pushButton_15)
        self.lineEdit_7 = QtWidgets.QLineEdit(self.CJL_Tab)
        self.lineEdit_7.setStyleSheet("QLineEdit {\n"
"    border: 2px solid #8f8f91;\n"
"    border-radius: 15px;\n"
"    padding: 5px;\n"
"    background-color: #f0f0f0;\n"
"    font-size: 16px;\n"
"    transition: border-color 0.3s ease;\n"
"}\n"
"\n"
"QLineEdit:focus {\n"
"    border: 2px solid #5d9cec;\n"
"    background-color: #ffffff;\n"
"    box-shadow: 0 0 10px #5d9cec;\n"
"}")
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.horizontalLayout_10.addWidget(self.lineEdit_7)
        self.verticalLayout_10.addLayout(self.horizontalLayout_10)
        self.Clj_table = QtWidgets.QTableWidget(self.CJL_Tab)
        self.Clj_table.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(18)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Clj_table.sizePolicy().hasHeightForWidth())
        self.Clj_table.setSizePolicy(sizePolicy)
        self.Clj_table.setMinimumSize(QtCore.QSize(22, 2))
        self.Clj_table.setSizeIncrement(QtCore.QSize(14, 0))
        self.Clj_table.setBaseSize(QtCore.QSize(9, 0))
        font = QtGui.QFont()
        font.setFamily("Rockwell Extra Bold")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(10)
        self.Clj_table.setFont(font)
        self.Clj_table.setAutoFillBackground(True)
        self.Clj_table.setStyleSheet("/* Style for the tab widget */\n"
"QTabWidget::pane {\n"
"    border: 1px solid #3c3c3c;\n"
"    border-radius: 8px;\n"
"    background-color: #2c2c2c;\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */\n"
"}\n"
"\n"
"/* Style for each tab */\n"
"QTabBar::tab {\n"
"    padding: 10px 20px;\n"
"    color: #ddd; /* Lighter text color */\n"
"    background-color: #3c3c3c;\n"
"    border: 1px solid #4c4c4c;\n"
"    border-top-left-radius: 5px;\n"
"    border-top-right-radius: 5px;\n"
"    margin-right: -1px; /* Ensures adjacent tabs have no gap */\n"
"    transition: background-color 0.3s ease, color 0.3s ease; /* Smooth color transition */\n"
"}\n"
"\n"
"/* Style for the active tab */\n"
"QTabBar::tab:selected {\n"
"    background-color: #4c4c4c;\n"
"    color: #66ff66; /* Softer green text for active tab */\n"
"}\n"
"\n"
"/* Hover effect for tabs */\n"
"QTabBar::tab:hover {\n"
"    background-color: #5c5c5c;\n"
"    color: #fff; /* White text on hover */\n"
"}\n"
"\n"
"/* Remove right border for the last tab */\n"
"QTabBar::tab:last {\n"
"    margin-right: 0;\n"
"}\n"
"\n"
"/* Additional hover effect for better user experience */\n"
"QTabBar::tab:!selected:hover {\n"
"    transform: scale(1.05); /* Slightly enlarge the tab */\n"
"    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow on hover */\n"
"}\n"
"\n"
"")
        self.Clj_table.setIconSize(QtCore.QSize(24, 0))
        self.Clj_table.setObjectName("Clj_table")
        self.Clj_table.setColumnCount(13)
        self.Clj_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.Clj_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.Clj_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.Clj_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.Clj_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.Clj_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.Clj_table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.Clj_table.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.Clj_table.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.Clj_table.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.Clj_table.setHorizontalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.Clj_table.setHorizontalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.Clj_table.setHorizontalHeaderItem(11, item)
        item = QtWidgets.QTableWidgetItem()
        self.Clj_table.setHorizontalHeaderItem(12, item)
        self.Clj_table.horizontalHeader().setCascadingSectionResizes(False)
        self.Clj_table.horizontalHeader().setDefaultSectionSize(300)
        self.Clj_table.horizontalHeader().setMinimumSectionSize(167)
        self.verticalLayout_10.addWidget(self.Clj_table)
        self.Main_Tab.addTab(self.CJL_Tab, "")
        self.filesActivity_tab = QtWidgets.QWidget()
        self.filesActivity_tab.setObjectName("filesActivity_tab")
        self.verticalLayout_17 = QtWidgets.QVBoxLayout(self.filesActivity_tab)
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.filter_2 = QtWidgets.QPushButton(self.filesActivity_tab)
        self.filter_2.setStyleSheet("QPushButton {\n"
"   \n"
"    background-color: rgb(50, 143, 29);\n"
"    border: none;\n"
"    color: rgb(255, 255, 255);\n"
"    padding: 7px 15px;\n"
"    text-align: center;\n"
"    text-decoration: none;\n"
"    display: inline-block;\n"
"    font-size: 16px;\n"
"    margin: 4px 2px;\n"
"    border-radius: 12px;\n"
"    transition-duration: 0.4s;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"   \n"
"    background-color: rgb(213, 112, 23);\n"
"    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #3a6ca4;\n"
"    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n"
"    transform: translateY(2px);\n"
"}\n"
"")
        self.filter_2.setObjectName("filter_2")
        self.horizontalLayout_5.addWidget(self.filter_2)
        self.Searchbar_2 = QtWidgets.QLineEdit(self.filesActivity_tab)
        self.Searchbar_2.setStyleSheet("QLineEdit {\n"
"    border: 2px solid #8f8f91;\n"
"    border-radius: 15px;\n"
"    padding: 5px;\n"
"    background-color: #f0f0f0;\n"
"    font-size: 16px;\n"
"    transition: border-color 0.3s ease;\n"
"}\n"
"\n"
"QLineEdit:focus {\n"
"    border: 2px solid #5d9cec;\n"
"    background-color: #ffffff;\n"
"    box-shadow: 0 0 10px #5d9cec;\n"
"}")
        self.Searchbar_2.setObjectName("Searchbar_2")
        self.horizontalLayout_5.addWidget(self.Searchbar_2)
        self.verticalLayout_17.addLayout(self.horizontalLayout_5)
        self.filesActivityTab_tables = QtWidgets.QTabWidget(self.filesActivity_tab)
        self.filesActivityTab_tables.setMovable(True)
        self.filesActivityTab_tables.setObjectName("filesActivityTab_tables")
        self.Recent_docs_tab = QtWidgets.QWidget()
        self.Recent_docs_tab.setObjectName("Recent_docs_tab")
        self.verticalLayout_19 = QtWidgets.QVBoxLayout(self.Recent_docs_tab)
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.RecentDocs_table = QtWidgets.QTableWidget(self.Recent_docs_tab)
        self.RecentDocs_table.setObjectName("RecentDocs_table")
        self.RecentDocs_table.setColumnCount(4)
        self.RecentDocs_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.RecentDocs_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.RecentDocs_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.RecentDocs_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.RecentDocs_table.setHorizontalHeaderItem(3, item)
        self.RecentDocs_table.horizontalHeader().setDefaultSectionSize(400)
        self.verticalLayout_19.addWidget(self.RecentDocs_table)
        self.filesActivityTab_tables.addTab(self.Recent_docs_tab, "")
        self.SearchViaExplorerbar_tab = QtWidgets.QWidget()
        self.SearchViaExplorerbar_tab.setObjectName("SearchViaExplorerbar_tab")
        self.verticalLayout_20 = QtWidgets.QVBoxLayout(self.SearchViaExplorerbar_tab)
        self.verticalLayout_20.setObjectName("verticalLayout_20")
        self.SearchViaExplorer_table = QtWidgets.QTableWidget(self.SearchViaExplorerbar_tab)
        self.SearchViaExplorer_table.setObjectName("SearchViaExplorer_table")
        self.SearchViaExplorer_table.setColumnCount(3)
        self.SearchViaExplorer_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.SearchViaExplorer_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.SearchViaExplorer_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.SearchViaExplorer_table.setHorizontalHeaderItem(2, item)
        self.SearchViaExplorer_table.horizontalHeader().setDefaultSectionSize(400)
        self.verticalLayout_20.addWidget(self.SearchViaExplorer_table)
        self.filesActivityTab_tables.addTab(self.SearchViaExplorerbar_tab, "")
        self.OpenSaveMru = QtWidgets.QWidget()
        self.OpenSaveMru.setObjectName("OpenSaveMru")
        self.verticalLayout_21 = QtWidgets.QVBoxLayout(self.OpenSaveMru)
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.OpenSaveMRU_table = QtWidgets.QTableWidget(self.OpenSaveMru)
        self.OpenSaveMRU_table.setObjectName("OpenSaveMRU_table")
        self.OpenSaveMRU_table.setColumnCount(4)
        self.OpenSaveMRU_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.OpenSaveMRU_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.OpenSaveMRU_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.OpenSaveMRU_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.OpenSaveMRU_table.setHorizontalHeaderItem(3, item)
        self.OpenSaveMRU_table.horizontalHeader().setDefaultSectionSize(400)
        self.verticalLayout_21.addWidget(self.OpenSaveMRU_table)
        self.filesActivityTab_tables.addTab(self.OpenSaveMru, "")
        self.LastSaveMRU_tab = QtWidgets.QWidget()
        self.LastSaveMRU_tab.setObjectName("LastSaveMRU_tab")
        self.verticalLayout_22 = QtWidgets.QVBoxLayout(self.LastSaveMRU_tab)
        self.verticalLayout_22.setObjectName("verticalLayout_22")
        self.LastSaveMRU_table = QtWidgets.QTableWidget(self.LastSaveMRU_tab)
        self.LastSaveMRU_table.setObjectName("LastSaveMRU_table")
        self.LastSaveMRU_table.setColumnCount(4)
        self.LastSaveMRU_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.LastSaveMRU_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.LastSaveMRU_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.LastSaveMRU_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.LastSaveMRU_table.setHorizontalHeaderItem(3, item)
        self.LastSaveMRU_table.horizontalHeader().setDefaultSectionSize(400)
        self.verticalLayout_22.addWidget(self.LastSaveMRU_table)
        self.filesActivityTab_tables.addTab(self.LastSaveMRU_tab, "")
        self.TypedPathes_tab = QtWidgets.QWidget()
        self.TypedPathes_tab.setObjectName("TypedPathes_tab")
        self.verticalLayout_23 = QtWidgets.QVBoxLayout(self.TypedPathes_tab)
        self.verticalLayout_23.setObjectName("verticalLayout_23")
        self.TypedPath_table = QtWidgets.QTableWidget(self.TypedPathes_tab)
        self.TypedPath_table.setObjectName("TypedPath_table")
        self.TypedPath_table.setColumnCount(3)
        self.TypedPath_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.TypedPath_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.TypedPath_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.TypedPath_table.setHorizontalHeaderItem(2, item)
        self.TypedPath_table.horizontalHeader().setDefaultSectionSize(400)
        self.verticalLayout_23.addWidget(self.TypedPath_table)
        self.filesActivityTab_tables.addTab(self.TypedPathes_tab, "")
        self.BAM_tab = QtWidgets.QWidget()
        self.BAM_tab.setObjectName("BAM_tab")
        self.verticalLayout_25 = QtWidgets.QVBoxLayout(self.BAM_tab)
        self.verticalLayout_25.setObjectName("verticalLayout_25")
        self.Bam_table = QtWidgets.QTableWidget(self.BAM_tab)
        self.Bam_table.setObjectName("Bam_table")
        self.Bam_table.setColumnCount(4)
        self.Bam_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.Bam_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.Bam_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.Bam_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.Bam_table.setHorizontalHeaderItem(3, item)
        self.Bam_table.horizontalHeader().setDefaultSectionSize(500)
        self.verticalLayout_25.addWidget(self.Bam_table)
        self.filesActivityTab_tables.addTab(self.BAM_tab, "")
        self.Dam_tab = QtWidgets.QWidget()
        self.Dam_tab.setObjectName("Dam_tab")
        self.verticalLayout_24 = QtWidgets.QVBoxLayout(self.Dam_tab)
        self.verticalLayout_24.setObjectName("verticalLayout_24")
        self.Dam_table = QtWidgets.QTableWidget(self.Dam_tab)
        self.Dam_table.setObjectName("Dam_table")
        self.Dam_table.setColumnCount(4)
        self.Dam_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.Dam_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.Dam_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.Dam_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.Dam_table.setHorizontalHeaderItem(3, item)
        self.Dam_table.horizontalHeader().setDefaultSectionSize(500)
        self.verticalLayout_24.addWidget(self.Dam_table)
        self.filesActivityTab_tables.addTab(self.Dam_tab, "")
        self.verticalLayout_17.addWidget(self.filesActivityTab_tables)
        self.Main_Tab.addTab(self.filesActivity_tab, "")
        self.Prefetch_tab = QtWidgets.QWidget()
        self.Prefetch_tab.setObjectName("Prefetch_tab")
        self.verticalLayout_26 = QtWidgets.QVBoxLayout(self.Prefetch_tab)
        self.verticalLayout_26.setObjectName("verticalLayout_26")
        self.Prefetch_table = QtWidgets.QTableWidget(self.Prefetch_tab)
        self.Prefetch_table.setObjectName("Prefetch_table")
        self.Prefetch_table.setColumnCount(13)
        self.Prefetch_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.Prefetch_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.Prefetch_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.Prefetch_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.Prefetch_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.Prefetch_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.Prefetch_table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.Prefetch_table.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.Prefetch_table.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.Prefetch_table.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.Prefetch_table.setHorizontalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.Prefetch_table.setHorizontalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.Prefetch_table.setHorizontalHeaderItem(11, item)
        item = QtWidgets.QTableWidgetItem()
        self.Prefetch_table.setHorizontalHeaderItem(12, item)
        self.Prefetch_table.horizontalHeader().setDefaultSectionSize(300)
        self.verticalLayout_26.addWidget(self.Prefetch_table)
        self.Main_Tab.addTab(self.Prefetch_tab, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.verticalLayout_27 = QtWidgets.QVBoxLayout(self.tab)
        self.verticalLayout_27.setObjectName("verticalLayout_27")
        self.tabWidget = QtWidgets.QTabWidget(self.tab)
        self.tabWidget.setStyleSheet("QPushButton {\n"
"   \n"
"    background-color: rgb(50, 143, 29);\n"
"    border: none;\n"
"    color: rgb(255, 255, 255);\n"
"    padding: 7px 15px;\n"
"    text-align: center;\n"
"    text-decoration: none;\n"
"    display: inline-block;\n"
"    font-size: 16px;\n"
"    margin: 4px 2px;\n"
"    border-radius: 12px;\n"
"    transition-duration: 0.4s;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"   \n"
"    background-color: rgb(213, 112, 23);\n"
"    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #3a6ca4;\n"
"    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n"
"    transform: translateY(2px);\n"
"}\n"
"")
        self.tabWidget.setObjectName("tabWidget")
        self.AppLogs_tap = QtWidgets.QWidget()
        self.AppLogs_tap.setObjectName("AppLogs_tap")
        self.verticalLayout_28 = QtWidgets.QVBoxLayout(self.AppLogs_tap)
        self.verticalLayout_28.setObjectName("verticalLayout_28")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.filter_4 = QtWidgets.QPushButton(self.AppLogs_tap)
        self.filter_4.setStyleSheet("QPushButton {\n"
"   \n"
"    background-color: rgb(50, 143, 29);\n"
"    border: none;\n"
"    color: rgb(255, 255, 255);\n"
"    padding: 7px 15px;\n"
"    text-align: center;\n"
"    text-decoration: none;\n"
"    display: inline-block;\n"
"    font-size: 16px;\n"
"    margin: 4px 2px;\n"
"    border-radius: 12px;\n"
"    transition-duration: 0.4s;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"   \n"
"    background-color: rgb(213, 112, 23);\n"
"    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #3a6ca4;\n"
"    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n"
"    transform: translateY(2px);\n"
"}\n"
"")
        self.filter_4.setObjectName("filter_4")
        self.horizontalLayout_7.addWidget(self.filter_4)
        self.Searchbar_4 = QtWidgets.QLineEdit(self.AppLogs_tap)
        self.Searchbar_4.setStyleSheet("QLineEdit {\n"
"    border: 2px solid #8f8f91;\n"
"    border-radius: 15px;\n"
"    padding: 5px;\n"
"    background-color: #f0f0f0;\n"
"    font-size: 16px;\n"
"    transition: border-color 0.3s ease;\n"
"}\n"
"\n"
"QLineEdit:focus {\n"
"    border: 2px solid #5d9cec;\n"
"    background-color: #ffffff;\n"
"    box-shadow: 0 0 10px #5d9cec;\n"
"}QLineEdit {\n"
"    border: 2px solid #8f8f91;\n"
"    border-radius: 15px;\n"
"    padding: 5px;\n"
"    background-color: #f0f0f0;\n"
"    font-size: 16px;\n"
"    transition: border-color 0.3s ease;\n"
"}\n"
"\n"
"QLineEdit:focus {\n"
"    border: 2px solid #5d9cec;\n"
"    background-color: #ffffff;\n"
"    box-shadow: 0 0 10px #5d9cec;\n"
"}")
        self.Searchbar_4.setObjectName("Searchbar_4")
        self.horizontalLayout_7.addWidget(self.Searchbar_4)
        self.verticalLayout_28.addLayout(self.horizontalLayout_7)
        self.AppLogs_table = QtWidgets.QTableWidget(self.AppLogs_tap)
        self.AppLogs_table.setObjectName("AppLogs_table")
        self.AppLogs_table.setColumnCount(9)
        self.AppLogs_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.AppLogs_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.AppLogs_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.AppLogs_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.AppLogs_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.AppLogs_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.AppLogs_table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.AppLogs_table.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.AppLogs_table.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.AppLogs_table.setHorizontalHeaderItem(8, item)
        self.AppLogs_table.horizontalHeader().setDefaultSectionSize(300)
        self.verticalLayout_28.addWidget(self.AppLogs_table)
        self.tabWidget.addTab(self.AppLogs_tap, "")
        self.SecurityLogs_tab = QtWidgets.QWidget()
        self.SecurityLogs_tab.setObjectName("SecurityLogs_tab")
        self.verticalLayout_29 = QtWidgets.QVBoxLayout(self.SecurityLogs_tab)
        self.verticalLayout_29.setObjectName("verticalLayout_29")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.filter_5 = QtWidgets.QPushButton(self.SecurityLogs_tab)
        self.filter_5.setStyleSheet("QPushButton {\n"
"   \n"
"    background-color: rgb(50, 143, 29);\n"
"    border: none;\n"
"    color: rgb(255, 255, 255);\n"
"    padding: 7px 15px;\n"
"    text-align: center;\n"
"    text-decoration: none;\n"
"    display: inline-block;\n"
"    font-size: 16px;\n"
"    margin: 4px 2px;\n"
"    border-radius: 12px;\n"
"    transition-duration: 0.4s;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"   \n"
"    background-color: rgb(213, 112, 23);\n"
"    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #3a6ca4;\n"
"    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n"
"    transform: translateY(2px);\n"
"}\n"
"")
        self.filter_5.setObjectName("filter_5")
        self.horizontalLayout_8.addWidget(self.filter_5)
        self.Searchbar_5 = QtWidgets.QLineEdit(self.SecurityLogs_tab)
        self.Searchbar_5.setStyleSheet("QLineEdit {\n"
"    border: 2px solid #8f8f91;\n"
"    border-radius: 15px;\n"
"    padding: 5px;\n"
"    background-color: #f0f0f0;\n"
"    font-size: 16px;\n"
"    transition: border-color 0.3s ease;\n"
"}\n"
"\n"
"QLineEdit:focus {\n"
"    border: 2px solid #5d9cec;\n"
"    background-color: #ffffff;\n"
"    box-shadow: 0 0 10px #5d9cec;\n"
"}")
        self.Searchbar_5.setObjectName("Searchbar_5")
        self.horizontalLayout_8.addWidget(self.Searchbar_5)
        self.verticalLayout_29.addLayout(self.horizontalLayout_8)
        self.SecurityLogs_table = QtWidgets.QTableWidget(self.SecurityLogs_tab)
        self.SecurityLogs_table.setObjectName("SecurityLogs_table")
        self.SecurityLogs_table.setColumnCount(10)
        self.SecurityLogs_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.SecurityLogs_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.SecurityLogs_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.SecurityLogs_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.SecurityLogs_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.SecurityLogs_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.SecurityLogs_table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.SecurityLogs_table.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.SecurityLogs_table.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.SecurityLogs_table.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.SecurityLogs_table.setHorizontalHeaderItem(9, item)
        self.SecurityLogs_table.horizontalHeader().setDefaultSectionSize(300)
        self.verticalLayout_29.addWidget(self.SecurityLogs_table)
        self.tabWidget.addTab(self.SecurityLogs_tab, "")
        self.SystemLogs_tab = QtWidgets.QWidget()
        self.SystemLogs_tab.setObjectName("SystemLogs_tab")
        self.verticalLayout_30 = QtWidgets.QVBoxLayout(self.SystemLogs_tab)
        self.verticalLayout_30.setObjectName("verticalLayout_30")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.filter_6 = QtWidgets.QPushButton(self.SystemLogs_tab)
        self.filter_6.setStyleSheet("color: white\n"
"")
        self.filter_6.setObjectName("filter_6")
        self.horizontalLayout_9.addWidget(self.filter_6)
        self.Searchbar_6 = QtWidgets.QLineEdit(self.SystemLogs_tab)
        self.Searchbar_6.setStyleSheet("QLineEdit {\n"
"    border: 2px solid #8f8f91;\n"
"    border-radius: 15px;\n"
"    padding: 5px;\n"
"    background-color: #f0f0f0;\n"
"    font-size: 16px;\n"
"    transition: border-color 0.3s ease;\n"
"}\n"
"\n"
"QLineEdit:focus {\n"
"    border: 2px solid #5d9cec;\n"
"    background-color: #ffffff;\n"
"    box-shadow: 0 0 10px #5d9cec;\n"
"}")
        self.Searchbar_6.setObjectName("Searchbar_6")
        self.horizontalLayout_9.addWidget(self.Searchbar_6)
        self.verticalLayout_30.addLayout(self.horizontalLayout_9)
        self.SystemLogs_table = QtWidgets.QTableWidget(self.SystemLogs_tab)
        self.SystemLogs_table.setObjectName("SystemLogs_table")
        self.SystemLogs_table.setColumnCount(9)
        self.SystemLogs_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.SystemLogs_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.SystemLogs_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.SystemLogs_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.SystemLogs_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.SystemLogs_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.SystemLogs_table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.SystemLogs_table.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.SystemLogs_table.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.SystemLogs_table.setHorizontalHeaderItem(8, item)
        self.SystemLogs_table.horizontalHeader().setDefaultSectionSize(300)
        self.verticalLayout_30.addWidget(self.SystemLogs_table)
        self.tabWidget.addTab(self.SystemLogs_tab, "")
        self.verticalLayout_27.addWidget(self.tabWidget)
        self.Main_Tab.addTab(self.tab, "")
        self.verticalLayout.addWidget(self.Main_Tab)
        self.horizontalLayout_2.addWidget(self.info_frame)
        self.verticalLayout_2.addWidget(self.Main_frame)
        self.verticalLayout_2.setStretch(0, 1)
        self.verticalLayout_2.setStretch(1, 30)
        Crow_Eye.setCentralWidget(self.centralwidget)

        self.retranslateUi(Crow_Eye)
        self.Main_Tab.setCurrentIndex(5)
        self.Registry_widget.setCurrentIndex(8)
        self.filesActivityTab_tables.setCurrentIndex(0)
        self.tabWidget.setCurrentIndex(0)
        self.main_menu.clicked['bool'].connect(self.side_fram.setVisible) # type: ignore
        self.main_menu.clicked['bool'].connect(self.side_fram.setHidden) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(Crow_Eye)
        Crow_Eye.setTabOrder(self.lnkbutton, self.Jumblistbutton)
        Crow_Eye.setTabOrder(self.Jumblistbutton, self.logbutton)
        Crow_Eye.setTabOrder(self.logbutton, self.lineEdit)
        Crow_Eye.setTabOrder(self.lineEdit, self.add_files)
        Crow_Eye.setTabOrder(self.add_files, self.Main_Tab)
        Crow_Eye.setTabOrder(self.Main_Tab, self.lineEdit_2)
        Crow_Eye.setTabOrder(self.lineEdit_2, self.main_menu)
        Crow_Eye.setTabOrder(self.main_menu, self.LNK_table)
        Crow_Eye.setTabOrder(self.LNK_table, self.registrybutton)
        
        def load_data_from_database_NetworkLists():
            conn = sqlite3.connect('registry_data.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM Network_list")
            rows = cursor.fetchall()
            self.NetworkLists_table.setRowCount(0)
            for row in rows:
                row_index = self.NetworkLists_table.rowCount()
                self.NetworkLists_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.NetworkLists_table.setItem(row_index, col_index, item)
            conn.close()
        def load_data_from_database_ComputerName():
            conn = sqlite3.connect('registry_data.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM computer_Name")
            rows = cursor.fetchall()
            self.computerName_table.setRowCount(0)
            for row in rows:
                row_index = self.computerName_table.rowCount()
                self.computerName_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.computerName_table.setItem(row_index, col_index, item)
            conn.close()
        def load_data_from_database_Timezone():
            conn = sqlite3.connect('registry_data.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM time_zone")
            rows = cursor.fetchall()
            self.TimeZone_table.setRowCount(0)
            for row in rows:
                row_index = self.TimeZone_table.rowCount()
                self.TimeZone_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.TimeZone_table.setItem(row_index, col_index, item)
            conn.close()

        def load_data_from_database_NetworkInterfaces():
            conn = sqlite3.connect('registry_data.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM network_interfaces")
            rows = cursor.fetchall()
            self.NetworkInterface_table.setRowCount(0)
            for row in rows:
                row_index = self.NetworkInterface_table.rowCount()
                self.NetworkInterface_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.NetworkInterface_table.setItem(row_index, col_index, item)
            conn.close()
        def load_data_from_database_MachineRune():
            conn = sqlite3.connect('registry_data.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM machine_run")
            rows = cursor.fetchall()
            self.MachineRun_table.setRowCount(0)
            for row in rows:
                row_index = self.MachineRun_table.rowCount()
                self.MachineRun_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.MachineRun_table.setItem(row_index, col_index, item)
            conn.close()        
        
        def load_data_from_database_MachineRuneOnce():
            conn = sqlite3.connect('registry_data.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM machine_run_once")
            rows = cursor.fetchall()
            self.MachineRunOnce_tabel.setRowCount(0)
            for row in rows:
                row_index = self.MachineRunOnce_tabel.rowCount()
                self.MachineRunOnce_tabel.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.MachineRunOnce_tabel.setItem(row_index, col_index, item)
            conn.close()                
        def load_data_from_database_UserRun():
            conn = sqlite3.connect('registry_data.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM user_run")
            rows = cursor.fetchall()
            self.UserRun_table.setRowCount(0)
            for row in rows:
                row_index = self.UserRun_table.rowCount()
                self.UserRun_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.UserRun_table.setItem(row_index, col_index, item)
            conn.close()   
        def load_data_from_database_UserRunOnce():
            conn = sqlite3.connect('registry_data.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM user_run_once")
            rows = cursor.fetchall()
            self.UserRunOnce_table.setRowCount(0)
            for row in rows:
                row_index = self.UserRunOnce_table.rowCount()
                self.UserRunOnce_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.UserRunOnce_table.setItem(row_index, col_index, item)
            conn.close() 
        def load_data_from_database_LastUpdate():
            conn = sqlite3.connect('registry_data.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM Windows_lastupdate")
            rows = cursor.fetchall()
            self.LastUpdate_table.setRowCount(0)
            for row in rows:
                row_index = self.LastUpdate_table.rowCount()
                self.LastUpdate_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.LastUpdate_table.setItem(row_index, col_index, item)
            conn.close()        
        def load_data_from_database_LastUpdate_subkeys():
            conn = sqlite3.connect('registry_data.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM Windows_lastupdate")
            rows = cursor.fetchall()
            self.LastUpdateInfo_table.setRowCount(0)
            for row in rows:
                row_index = self.LastUpdateInfo_table.rowCount()
                self.LastUpdateInfo_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.LastUpdateInfo_table.setItem(row_index, col_index, item)
            conn.close() 
        def load_data_from_database_shutdowninfo():
            conn = sqlite3.connect('registry_data.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM Windows_lastupdate")
            rows = cursor.fetchall()
            self.ShutDown_table.setRowCount(0)
            for row in rows:
                row_index = self.ShutDown_table.rowCount()
                self.ShutDown_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.ShutDown_table.setItem(row_index, col_index, item)
            conn.close()
        def load_data_from_database_RecentDocs():
            conn = sqlite3.connect('registry_data.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM RecentDocs")
            rows = cursor.fetchall()
            self.RecentDocs_table.setRowCount(0)
            for row in rows:
                row_index = self.RecentDocs_table.rowCount()
                self.RecentDocs_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.RecentDocs_table.setItem(row_index, col_index, item)
            conn.close()
        
        def load_data_from_database_search_explorer_bar():
            conn = sqlite3.connect('registry_data.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM Search_Explorer_bar")
            rows = cursor.fetchall()
            self.SearchViaExplorer_table.setRowCount(0)
            for row in rows:
                row_index = self.SearchViaExplorer_table.rowCount()
                self.SearchViaExplorer_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.SearchViaExplorer_table.setItem(row_index, col_index, item)
            conn.close()
        def load_data_from_database_OpenSaveMRU():
            conn = sqlite3.connect('registry_data.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM OpenSaveMRU")
            rows = cursor.fetchall()
            self.OpenSaveMRU_table.setRowCount(0)
            for row in rows:
                row_index = self.OpenSaveMRU_table.rowCount()
                self.OpenSaveMRU_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.OpenSaveMRU_table.setItem(row_index, col_index, item)
            conn.close()
            
        def load_data_from_database_LastSaveMRU():
            conn = sqlite3.connect('registry_data.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM lastSaveMRU")
            rows = cursor.fetchall()
            self.LastSaveMRU_table.setRowCount(0)
            for row in rows:
                row_index = self.LastSaveMRU_table.rowCount()
                self.LastSaveMRU_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.LastSaveMRU_table.setItem(row_index, col_index, item)
            conn.close()
        def load_data_from_database_TypedPathes():
            conn = sqlite3.connect('registry_data.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM TypedPaths")
            rows = cursor.fetchall()
            self.TypedPath_table.setRowCount(0)
            for row in rows:
                row_index = self.TypedPath_table.rowCount()
                self.TypedPath_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.TypedPath_table.setItem(row_index, col_index, item)
            conn.close()
        
        def load_data_from_database_BAM():
            conn = sqlite3.connect('registry_data.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM BAM")
            rows = cursor.fetchall()
            self.Bam_table.setRowCount(0)
            for row in rows:
                row_index = self.Bam_table.rowCount()
                self.Bam_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.Bam_table.setItem(row_index, col_index, item)
            conn.close()
        
        def load_data_from_database_DAM():
            conn = sqlite3.connect('registry_data.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM DAM")
            rows = cursor.fetchall()
            self.Dam_table.setRowCount(0)
            for row in rows:
                row_index = self.Dam_table.rowCount()
                self.Dam_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.Dam_table.setItem(row_index, col_index, item)
            conn.close()
        
                                
        def load_data_from_database_lnkAJL():
            conn = sqlite3.connect('LnkDB.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM JLCE")
            rows = cursor.fetchall()
            self.LNK_table.setRowCount(0)
            for row in rows:
                row_index = self.LNK_table.rowCount()
                self.LNK_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.LNK_table.setItem(row_index, col_index, item)
            conn.close()
        
        def load_data_from_database_CJL():
            conn = sqlite3.connect('LnkDB.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM Custom_JLCE")
            rows = cursor.fetchall()
            # Populate the table widget with data from the database
            self.Clj_table.setRowCount(0)
            for row in rows:
                row_index = self.Clj_table.rowCount()
                self.Clj_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.Clj_table.setItem(row_index, col_index, item)

            conn.close()

        def load_data_from_SystemLogs():
            conn = sqlite3.connect('Log_Claw.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM SystemLogs")
            rows = cursor.fetchall()
            # Populate the table widget with data from the database
            self.SystemLogs_table.setRowCount(0)
            for row in rows:
                row_index = self.SystemLogs_table.rowCount()
                self.SystemLogs_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.SystemLogs_table.setItem(row_index, col_index, item)

            conn.close()
        
        def load_data_from_appsLogs():
            conn = sqlite3.connect('Log_Claw.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM ApplicationLogs")
            rows = cursor.fetchall()
            # Populate the table widget with data from the database
            self.AppLogs_table.setRowCount(0)
            for row in rows:
                row_index = self.AppLogs_table.rowCount()
                self.AppLogs_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.AppLogs_table.setItem(row_index, col_index, item)

            conn.close()
        def load_data_from_SecurityLogs():
            conn = sqlite3.connect('Log_Claw.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM SecurityLogs")
            rows = cursor.fetchall()
            # Populate the table widget with data from the database
            self.SecurityLogs_table.setRowCount(0)
            for row in rows:
                row_index = self.SecurityLogs_table.rowCount()
                self.SecurityLogs_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.SecurityLogs_table.setItem(row_index, col_index, item)

            conn.close()
        
        def load_data_from_Prefetch():
            conn = sqlite3.connect('prefetch.db')
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM prefetch_files")
            rows = cursor.fetchall()
            # Populate the table widget with data from the database
            self.Prefetch_table.setRowCount(0)
            for row in rows:
                row_index = self.Prefetch_table.rowCount()
                self.Prefetch_table.insertRow(row_index)
                for col_index, value in enumerate(row):
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.Prefetch_table.setItem(row_index, col_index, item)

            conn.close()
            
            
        
        
        
        
        
        
        def load_allReg_data():
            load_data_from_database_NetworkLists()
            load_data_from_database_NetworkInterfaces()
            load_data_from_database_ComputerName()
            load_data_from_database_Timezone()
            load_data_from_database_LastUpdate()
            load_data_from_database_LastUpdate_subkeys()
            load_data_from_database_shutdowninfo()
            load_data_from_database_MachineRune()
            load_data_from_database_MachineRuneOnce()
            load_data_from_database_UserRun()
            load_data_from_database_UserRunOnce()
        
        def load_files_acitvity():
            load_data_from_database_search_explorer_bar()
            load_data_from_database_RecentDocs()
            load_data_from_database_TypedPathes
            load_data_from_database_OpenSaveMRU()
            load_data_from_database_LastSaveMRU()
            load_data_from_database_BAM()
            load_data_from_database_DAM()
        
        def load_all_logs():
            load_data_from_SystemLogs()
            load_data_from_SecurityLogs()
            load_data_from_appsLogs()
        def run_data_visualization():
            python_executable = sys.executable
            subprocess.Popen([python_executable, '-m', 'streamlit', 'run', 'Data_visualization.py'])

        

        
        self.lnkbutton.clicked.connect(load_data_from_database_lnkAJL)
        self.Jumblistbutton.clicked.connect(load_data_from_database_CJL)
        self.registrybutton.clicked.connect(load_allReg_data)
        self.filesactivitybutton.clicked.connect(load_files_acitvity)
        self.logbutton.clicked.connect(load_all_logs)
        self.Prefetchbutton.clicked.connect(load_data_from_Prefetch)
        self.time_line_button.clicked.connect(run_data_visualization)
        

    def retranslateUi(self, Crow_Eye):
        _translate = QtCore.QCoreApplication.translate
        Crow_Eye.setWindowTitle(_translate("Crow_Eye", "Crow Eye"))
        self.label.setText(_translate("Crow_Eye", "Case name"))
        self.label_2.setText(_translate("Crow_Eye", "files "))
        self.registrybutton.setText(_translate("Crow_Eye", "Registry"))
        self.lnkbutton.setText(_translate("Crow_Eye", "Lnk and A-jl"))
        self.Jumblistbutton.setText(_translate("Crow_Eye", "C-Jumb lists"))
        self.filesactivitybutton.setText(_translate("Crow_Eye", "files activity"))
        self.Prefetchbutton.setText(_translate("Crow_Eye", "Prefetch"))
        self.logbutton.setText(_translate("Crow_Eye", "LOgs"))
        self.label_3.setText(_translate("Crow_Eye", "info to view"))
        self.time_line_button.setText(_translate("Crow_Eye", "Time Line"))
        self.pushButton_16.setText(_translate("Crow_Eye", "filter"))
        self.lineEdit.setText(_translate("Crow_Eye", "search here"))
        self.add_files.setText(_translate("Crow_Eye", "Add files"))
        self.filter.setText(_translate("Crow_Eye", "filter"))
        self.Searchbar.setText(_translate("Crow_Eye", "filter command "))
        item = self.computerName_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "Name"))
        item = self.computerName_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Data"))
        item = self.computerName_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Data Type"))
        self.Registry_widget.setTabText(self.Registry_widget.indexOf(self.computer_Name), _translate("Crow_Eye", "Computer name"))
        item = self.TimeZone_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "Name"))
        item = self.TimeZone_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Data"))
        item = self.TimeZone_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Data Type"))
        self.Registry_widget.setTabText(self.Registry_widget.indexOf(self.Time_Zone), _translate("Crow_Eye", "Time Zone"))
        item = self.NetworkInterface_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "Sub Key name"))
        item = self.NetworkInterface_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Service"))
        item = self.NetworkInterface_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Data"))
        item = self.NetworkInterface_table.horizontalHeaderItem(3)
        item.setText(_translate("Crow_Eye", "Data Type"))
        self.Registry_widget.setTabText(self.Registry_widget.indexOf(self.NetworkInterfaces_tab), _translate("Crow_Eye", "Network Interfaces"))
        item = self.NetworkLists_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "Sub Key Name"))
        item = self.NetworkLists_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Service"))
        item = self.NetworkLists_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Data"))
        item = self.NetworkLists_table.horizontalHeaderItem(3)
        item.setText(_translate("Crow_Eye", "Data Type"))
        self.Registry_widget.setTabText(self.Registry_widget.indexOf(self.Networklists), _translate("Crow_Eye", "Network Lists"))
        item = self.MachineRun_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "Name"))
        item = self.MachineRun_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Data "))
        item = self.MachineRun_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Data Type"))
        self.Registry_widget.setTabText(self.Registry_widget.indexOf(self.MachineRun), _translate("Crow_Eye", "Machine_Run"))
        item = self.MachineRunOnce_tabel.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "Name"))
        item = self.MachineRunOnce_tabel.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Data"))
        item = self.MachineRunOnce_tabel.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Data type"))
        self.Registry_widget.setTabText(self.Registry_widget.indexOf(self.Machine_run_once), _translate("Crow_Eye", "Machine_run_once"))
        item = self.UserRun_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "Name"))
        item = self.UserRun_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Data"))
        item = self.UserRun_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Data Type"))
        self.Registry_widget.setTabText(self.Registry_widget.indexOf(self.User_run), _translate("Crow_Eye", "User_Run"))
        item = self.UserRunOnce_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "Name"))
        item = self.UserRunOnce_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Data"))
        item = self.UserRunOnce_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Data Type"))
        self.Registry_widget.setTabText(self.Registry_widget.indexOf(self.User_run_once), _translate("Crow_Eye", "User_run_once"))
        item = self.LastUpdate_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "Name"))
        item = self.LastUpdate_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Data"))
        item = self.LastUpdate_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Data Type"))
        self.Registry_widget.setTabText(self.Registry_widget.indexOf(self.Last_update), _translate("Crow_Eye", "Last Update"))
        self.LastUpdateInfo_table.setSortingEnabled(True)
        item = self.LastUpdateInfo_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "Sub key Name"))
        item = self.LastUpdateInfo_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Service"))
        item = self.LastUpdateInfo_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Data"))
        item = self.LastUpdateInfo_table.horizontalHeaderItem(3)
        item.setText(_translate("Crow_Eye", "Data Type"))
        self.Registry_widget.setTabText(self.Registry_widget.indexOf(self.Lstupdate_info), _translate("Crow_Eye", "Last update info"))
        item = self.ShutDown_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "Name"))
        item = self.ShutDown_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Data"))
        item = self.ShutDown_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Data Type"))
        self.Registry_widget.setTabText(self.Registry_widget.indexOf(self.ShutDown_tab), _translate("Crow_Eye", "Shutdown info"))
        self.Main_Tab.setTabText(self.Main_Tab.indexOf(self.Registry_Tab), _translate("Crow_Eye", "Registry"))
        self.pushButton.setText(_translate("Crow_Eye", "Filter"))
        self.lineEdit_2.setText(_translate("Crow_Eye", "filter command "))
        self.LNK_table.setSortingEnabled(True)
        item = self.LNK_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "Source_Name"))
        item = self.LNK_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Source_path"))
        item = self.LNK_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Owner UID"))
        item = self.LNK_table.horizontalHeaderItem(3)
        item.setText(_translate("Crow_Eye", "Owner GID"))
        item = self.LNK_table.horizontalHeaderItem(4)
        item.setText(_translate("Crow_Eye", "Time_Access"))
        item = self.LNK_table.horizontalHeaderItem(5)
        item.setText(_translate("Crow_Eye", "Time_Creation"))
        item = self.LNK_table.horizontalHeaderItem(6)
        item.setText(_translate("Crow_Eye", "Time_modefication"))
        item = self.LNK_table.horizontalHeaderItem(7)
        item.setText(_translate("Crow_Eye", "app_Type"))
        item = self.LNK_table.horizontalHeaderItem(8)
        item.setText(_translate("Crow_Eye", "App_ID"))
        item = self.LNK_table.horizontalHeaderItem(9)
        item.setText(_translate("Crow_Eye", "Artifact"))
        item = self.LNK_table.horizontalHeaderItem(10)
        item.setText(_translate("Crow_Eye", "Dataflag"))
        item = self.LNK_table.horizontalHeaderItem(11)
        item.setText(_translate("Crow_Eye", "Local_Path"))
        item = self.LNK_table.horizontalHeaderItem(12)
        item.setText(_translate("Crow_Eye", "Common Path"))
        item = self.LNK_table.horizontalHeaderItem(13)
        item.setText(_translate("Crow_Eye", "Location_Flags"))
        item = self.LNK_table.horizontalHeaderItem(14)
        item.setText(_translate("Crow_Eye", "Lnk_Class_ID"))
        item = self.LNK_table.horizontalHeaderItem(15)
        item.setText(_translate("Crow_Eye", "File_Attribute"))
        item = self.LNK_table.horizontalHeaderItem(16)
        item.setText(_translate("Crow_Eye", "File_Size"))
        item = self.LNK_table.horizontalHeaderItem(17)
        item.setText(_translate("Crow_Eye", "Header_size"))
        item = self.LNK_table.horizontalHeaderItem(18)
        item.setText(_translate("Crow_Eye", "Icon_Index"))
        item = self.LNK_table.horizontalHeaderItem(19)
        item.setText(_translate("Crow_Eye", "Show_window"))
        item = self.LNK_table.horizontalHeaderItem(20)
        item.setText(_translate("Crow_Eye", "Drive_type"))
        item = self.LNK_table.horizontalHeaderItem(21)
        item.setText(_translate("Crow_Eye", "Drive_SN"))
        item = self.LNK_table.horizontalHeaderItem(22)
        item.setText(_translate("Crow_Eye", "Volume_Label"))
        item = self.LNK_table.horizontalHeaderItem(23)
        item.setText(_translate("Crow_Eye", "Entry_Number"))
        item = self.LNK_table.horizontalHeaderItem(24)
        item.setText(_translate("Crow_Eye", "Network_Device_Name"))
        item = self.LNK_table.horizontalHeaderItem(25)
        item.setText(_translate("Crow_Eye", "Network_Providers"))
        item = self.LNK_table.horizontalHeaderItem(26)
        item.setText(_translate("Crow_Eye", "Network_share_Flags"))
        item = self.LNK_table.horizontalHeaderItem(27)
        item.setText(_translate("Crow_Eye", "Network_Share_Name"))
        item = self.LNK_table.horizontalHeaderItem(28)
        item.setText(_translate("Crow_Eye", "Network_Share_Name_UNI"))
        item = self.LNK_table.horizontalHeaderItem(29)
        item.setText(_translate("Crow_Eye", "File_Permission "))
        item = self.LNK_table.horizontalHeaderItem(30)
        item.setText(_translate("Crow_Eye", "Number of the hardlinks"))
        item = self.LNK_table.horizontalHeaderItem(31)
        item.setText(_translate("Crow_Eye", "Device_ID"))
        item = self.LNK_table.horizontalHeaderItem(32)
        item.setText(_translate("Crow_Eye", "Inode number"))
        self.Main_Tab.setTabText(self.Main_Tab.indexOf(self.LNK_AL_Tab), _translate("Crow_Eye", "LNK and A_JL"))
        self.pushButton_15.setText(_translate("Crow_Eye", "filter"))
        self.lineEdit_7.setText(_translate("Crow_Eye", "filter command "))
        self.Clj_table.setSortingEnabled(True)
        item = self.Clj_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "File name"))
        item = self.Clj_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "File Directory"))
        item = self.Clj_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Owner UID"))
        item = self.Clj_table.horizontalHeaderItem(3)
        item.setText(_translate("Crow_Eye", "Owner GID"))
        item = self.Clj_table.horizontalHeaderItem(4)
        item.setText(_translate("Crow_Eye", "Access time"))
        item = self.Clj_table.horizontalHeaderItem(5)
        item.setText(_translate("Crow_Eye", "Creation Time"))
        item = self.Clj_table.horizontalHeaderItem(6)
        item.setText(_translate("Crow_Eye", "Modification Time"))
        item = self.Clj_table.horizontalHeaderItem(7)
        item.setText(_translate("Crow_Eye", "File Size"))
        item = self.Clj_table.horizontalHeaderItem(8)
        item.setText(_translate("Crow_Eye", "File permission"))
        item = self.Clj_table.horizontalHeaderItem(9)
        item.setText(_translate("Crow_Eye", "numbers_hard_links"))
        item = self.Clj_table.horizontalHeaderItem(10)
        item.setText(_translate("Crow_Eye", "Device_id"))
        item = self.Clj_table.horizontalHeaderItem(11)
        item.setText(_translate("Crow_Eye", "Inode number"))
        item = self.Clj_table.horizontalHeaderItem(12)
        item.setText(_translate("Crow_Eye", "Artifact"))
        self.Main_Tab.setTabText(self.Main_Tab.indexOf(self.CJL_Tab), _translate("Crow_Eye", "C-JL"))
        self.filter_2.setText(_translate("Crow_Eye", "filter"))
        self.Searchbar_2.setText(_translate("Crow_Eye", "filter command "))
        item = self.RecentDocs_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "Sub Key Name"))
        item = self.RecentDocs_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Service"))
        item = self.RecentDocs_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Data"))
        item = self.RecentDocs_table.horizontalHeaderItem(3)
        item.setText(_translate("Crow_Eye", "Data type"))
        self.filesActivityTab_tables.setTabText(self.filesActivityTab_tables.indexOf(self.Recent_docs_tab), _translate("Crow_Eye", "Recent Docs"))
        item = self.SearchViaExplorer_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "Name"))
        item = self.SearchViaExplorer_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Data "))
        item = self.SearchViaExplorer_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Data type"))
        self.filesActivityTab_tables.setTabText(self.filesActivityTab_tables.indexOf(self.SearchViaExplorerbar_tab), _translate("Crow_Eye", "Search via Explorer bar"))
        item = self.OpenSaveMRU_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "Sub key Name"))
        item = self.OpenSaveMRU_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Service"))
        item = self.OpenSaveMRU_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Data "))
        item = self.OpenSaveMRU_table.horizontalHeaderItem(3)
        item.setText(_translate("Crow_Eye", "Data type"))
        self.filesActivityTab_tables.setTabText(self.filesActivityTab_tables.indexOf(self.OpenSaveMru), _translate("Crow_Eye", "Open Save MRU"))
        item = self.LastSaveMRU_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "Name"))
        item = self.LastSaveMRU_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Data"))
        item = self.LastSaveMRU_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Data Type"))
        item = self.LastSaveMRU_table.horizontalHeaderItem(3)
        item.setText(_translate("Crow_Eye", "PId"))
        self.filesActivityTab_tables.setTabText(self.filesActivityTab_tables.indexOf(self.LastSaveMRU_tab), _translate("Crow_Eye", "Last Save MRU"))
        item = self.TypedPath_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "Name "))
        item = self.TypedPath_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Data "))
        item = self.TypedPath_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Data Type"))
        self.filesActivityTab_tables.setTabText(self.filesActivityTab_tables.indexOf(self.TypedPathes_tab), _translate("Crow_Eye", "Typed Pathes"))
        item = self.Bam_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "Sub Key Name"))
        item = self.Bam_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Service"))
        item = self.Bam_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Data"))
        item = self.Bam_table.horizontalHeaderItem(3)
        item.setText(_translate("Crow_Eye", "Data Type"))
        self.filesActivityTab_tables.setTabText(self.filesActivityTab_tables.indexOf(self.BAM_tab), _translate("Crow_Eye", "BAM"))
        item = self.Dam_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "Sub Key Name"))
        item = self.Dam_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Service"))
        item = self.Dam_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Data"))
        item = self.Dam_table.horizontalHeaderItem(3)
        item.setText(_translate("Crow_Eye", "Data Type"))
        self.filesActivityTab_tables.setTabText(self.filesActivityTab_tables.indexOf(self.Dam_tab), _translate("Crow_Eye", "DAM"))
        self.Main_Tab.setTabText(self.Main_Tab.indexOf(self.filesActivity_tab), _translate("Crow_Eye", "Files activity"))
        item = self.Prefetch_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "ID"))
        item = self.Prefetch_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Executable Name"))
        item = self.Prefetch_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Run count"))
        item = self.Prefetch_table.horizontalHeaderItem(3)
        item.setText(_translate("Crow_Eye", "File Size"))
        item = self.Prefetch_table.horizontalHeaderItem(4)
        item.setText(_translate("Crow_Eye", "Last modified"))
        item = self.Prefetch_table.horizontalHeaderItem(5)
        item.setText(_translate("Crow_Eye", "Last Accessed"))
        item = self.Prefetch_table.horizontalHeaderItem(6)
        item.setText(_translate("Crow_Eye", "Creation Time"))
        item = self.Prefetch_table.horizontalHeaderItem(7)
        item.setText(_translate("Crow_Eye", "File Mode"))
        item = self.Prefetch_table.horizontalHeaderItem(8)
        item.setText(_translate("Crow_Eye", "Inode_number"))
        item = self.Prefetch_table.horizontalHeaderItem(9)
        item.setText(_translate("Crow_Eye", "Device ID "))
        item = self.Prefetch_table.horizontalHeaderItem(10)
        item.setText(_translate("Crow_Eye", "Number of hard Links"))
        item = self.Prefetch_table.horizontalHeaderItem(11)
        item.setText(_translate("Crow_Eye", "User ID "))
        item = self.Prefetch_table.horizontalHeaderItem(12)
        item.setText(_translate("Crow_Eye", " Group ID"))
        self.Main_Tab.setTabText(self.Main_Tab.indexOf(self.Prefetch_tab), _translate("Crow_Eye", "Prefetch"))
        self.filter_4.setText(_translate("Crow_Eye", "filter"))
        self.Searchbar_4.setText(_translate("Crow_Eye", "filter command "))
        item = self.AppLogs_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "Event ID"))
        item = self.AppLogs_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Source"))
        item = self.AppLogs_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Event Type"))
        item = self.AppLogs_table.horizontalHeaderItem(3)
        item.setText(_translate("Crow_Eye", "Category"))
        item = self.AppLogs_table.horizontalHeaderItem(4)
        item.setText(_translate("Crow_Eye", "Time"))
        item = self.AppLogs_table.horizontalHeaderItem(5)
        item.setText(_translate("Crow_Eye", "Computer Name"))
        item = self.AppLogs_table.horizontalHeaderItem(6)
        item.setText(_translate("Crow_Eye", "User"))
        item = self.AppLogs_table.horizontalHeaderItem(7)
        item.setText(_translate("Crow_Eye", "Key words"))
        item = self.AppLogs_table.horizontalHeaderItem(8)
        item.setText(_translate("Crow_Eye", "Event Description"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.AppLogs_tap), _translate("Crow_Eye", "Application Logs"))
        self.filter_5.setText(_translate("Crow_Eye", "filter"))
        self.Searchbar_5.setText(_translate("Crow_Eye", "filter command "))
        item = self.SecurityLogs_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "Event ID"))
        item = self.SecurityLogs_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Source"))
        item = self.SecurityLogs_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Event Type"))
        item = self.SecurityLogs_table.horizontalHeaderItem(3)
        item.setText(_translate("Crow_Eye", "Category"))
        item = self.SecurityLogs_table.horizontalHeaderItem(4)
        item.setText(_translate("Crow_Eye", "Time"))
        item = self.SecurityLogs_table.horizontalHeaderItem(5)
        item.setText(_translate("Crow_Eye", "Computer Name"))
        item = self.SecurityLogs_table.horizontalHeaderItem(6)
        item.setText(_translate("Crow_Eye", "User"))
        item = self.SecurityLogs_table.horizontalHeaderItem(7)
        item.setText(_translate("Crow_Eye", "Key words"))
        item = self.SecurityLogs_table.horizontalHeaderItem(8)
        item.setText(_translate("Crow_Eye", "Task Level"))
        item = self.SecurityLogs_table.horizontalHeaderItem(9)
        item.setText(_translate("Crow_Eye", "Event Description"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.SecurityLogs_tab), _translate("Crow_Eye", "Security Logs"))
        self.filter_6.setText(_translate("Crow_Eye", "filter"))
        self.Searchbar_6.setText(_translate("Crow_Eye", "filter command "))
        item = self.SystemLogs_table.horizontalHeaderItem(0)
        item.setText(_translate("Crow_Eye", "Event ID"))
        item = self.SystemLogs_table.horizontalHeaderItem(1)
        item.setText(_translate("Crow_Eye", "Source"))
        item = self.SystemLogs_table.horizontalHeaderItem(2)
        item.setText(_translate("Crow_Eye", "Event Type"))
        item = self.SystemLogs_table.horizontalHeaderItem(3)
        item.setText(_translate("Crow_Eye", "Category"))
        item = self.SystemLogs_table.horizontalHeaderItem(4)
        item.setText(_translate("Crow_Eye", "Time"))
        item = self.SystemLogs_table.horizontalHeaderItem(5)
        item.setText(_translate("Crow_Eye", "Computer Name"))
        item = self.SystemLogs_table.horizontalHeaderItem(6)
        item.setText(_translate("Crow_Eye", "User"))
        item = self.SystemLogs_table.horizontalHeaderItem(7)
        item.setText(_translate("Crow_Eye", "Key words"))
        item = self.SystemLogs_table.horizontalHeaderItem(8)
        item.setText(_translate("Crow_Eye", "Event Description"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.SystemLogs_tab), _translate("Crow_Eye", "SYstem Logs"))
        self.Main_Tab.setTabText(self.Main_Tab.indexOf(self.tab), _translate("Crow_Eye", "Logs"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Crow_Eye = QtWidgets.QMainWindow()
    ui = Ui_Crow_Eye()
    ui.setupUi(Crow_Eye)
    Crow_Eye.show()
    sys.exit(app.exec_())
